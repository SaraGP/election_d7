<?php
/**
 * @file
 * Election Candidate: primary module file.
 */

// Required files.
require_once 'election_candidate.constants.inc';


/**
 * Implements hook_entity_info().
 */
function election_candidate_entity_info() {

  $entities = array();

  $entities['election_candidate'] = array(
    'label' => t('Election candidate'),
    'access callback' => 'election_candidate_access',
    'uri callback' => 'election_candidate_uri',
    'controller class' => 'ElectionCandidateController',
    'base table' => 'election_candidate',
    'label callback' => 'election_candidate_label',
    'entity keys' => array(
      'id' => 'candidate_id',
    ),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'bundles' => array(
      // Single bundles are named after the entity type (see entity_extract_ids()).
      'election_candidate' => array(
        'label' => t('Election candidate'),
        'admin' => array(
          'path' => 'admin/election/candidate',
          'access arguments' => array('administer elections'),
        ),
      ),
    ),
    'view modes' => array(
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'redirect' => FALSE, // for the Redirect module
  );

  return $entities;

}

/**
 * Implements hook_permission().
 */
function election_candidate_permission() {
  $permissions = array(
    'bypass nomination schedule' => array(
      'title' => t('Bypass nomination schedule'),
      'description' => t('This allows the user to submit a nomination at any time, regardless of whether or not nominations are open.'),
    ),
    'bypass nomination exclusivity' => array(
      'title' => t('Bypass nomination exclusivity'),
      'description' => t('This allows the user to submit a nomination for more than one exclusive position.'),
    ),
    'allow duplicate nominations' => array(
      'title' => t('Allow duplicate nominations'),
      'description' => t('This allows the user to submit more than one nomination for the same position.'),
    ),
    'submit nominations' => array(
      'title' => t('Submit nominations'),
      'description' => t('This allows the user to submit a nomination, only when nominations are open.'),
    ),
    'edit own nominations' => array(
      'title' => t('Edit own nominations'),
      'description' => t('This allows the user to edit his/her own nominations.'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to a given election candidate.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $candidate
 *   Optionally a candidate to check access for. If nothing is
 *   given, access for all candidates is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_candidate_access($op, $candidate = NULL, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }
  switch ($op) {
    case 'view':
      if (user_access('edit any election', $account)) {
        return TRUE;
      }
      if (user_access('view any election', $account) && (empty($candidate) || $candidate->cstatus == ELECTION_CANDIDATE_APPROVED)) {
        return TRUE;
      }
      break;
    case 'edit':
    case 'update':
    case 'delete':
    case 'view details':
      if (user_access('edit any election', $account)) {
        return TRUE;
      }
      break;
    case 'create':
      // Make sure we're explicitly "nominating" not creating by some other means.
      return FALSE;
      break;
    case 'nominate':
      return user_access('submit nominations', $account);
      break;
  }
  // @todo clean up this function.
  if ($candidate === NULL || empty($candidate->uid) || $candidate->uid !== $account->uid) {
    // This is not the account's nomination, and global checks have failed.
    return FALSE;
  }
  // This is the $acccount's nomination.
  switch ($op) {
    case 'view':
    case 'view details':
      return TRUE;
      break;
    case 'edit':
    case 'update':
      return (bool) user_access('edit own nominations', $account);
      break;
    default:
      return FALSE;
      break;
  }
}

/**
 * Helper function to allow access callbacks to work per election, rather than per
 * candidate.
 */
function election_candidate_access_per_election($op, stdClass $election, $account = NULL) {
  return (entity_access('view', 'election', $election, $account) && entity_access($op, 'election_candidate', NULL, $account));
}

/**
 * Implements hook_menu().
 */
function election_candidate_menu() {
  $items = array();

  $items['admin/election/candidate'] = array(
    'title' => 'Candidate settings',
    'description' => 'Manage fields and display settings for election candidates (not applicable to referendums).',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
  );

  $items['admin/election/candidate/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/nomination-form'] = array(
    'title' => 'Nomination form',
    'page callback' => 'election_page_nomination_form',
    'page arguments' => array(1),
    'access callback' => 'election_candidate_access_per_election',
    'access arguments' => array('nominate', 1),
    'file' => 'election-candidate.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 4,
  );

  $items['election/%election/candidates'] = array(
    'title' => 'Candidates',
    'page callback' => 'election_candidate_list_page',
    'page arguments' => array(1),
    'access callback' => 'election_candidate_access_per_election',
    'access arguments' => array('view', 1),
    'file' => 'election-candidate.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/candidates/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/candidates/manage'] = array(
    'title' => 'Manage candidates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_manage_form', 1),
    'access callback' => 'election_candidate_access_per_election',
    'access arguments' => array('edit', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/candidates/totals'] = array(
    'title' => 'View totals',
    'page callback' => 'election_candidate_totals_page',
    'page arguments' => array(1),
    'access callback' => 'election_candidate_access_per_election',
    'access arguments' => array('edit', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/candidates/download'] = array(
    'title' => 'Download data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_download_form', 1),
    'access callback' => 'election_candidate_access_per_election',
    'access arguments' => array('edit', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );


  $items['election-candidate/%election_candidate'] = array(
    'title callback' => 'election_candidate_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_candidate_page_view',
    'page arguments' => array(1),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['election-candidate/%election_candidate/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election-candidate/%election_candidate/details'] = array(
    'title' => 'Details',
    'page callback' => 'election_candidate_details_page_view',
    'page arguments' => array(1),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('view details', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election-candidate/%election_candidate/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_edit_form', 1),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  $items['election-candidate/%election_candidate/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_edit_form_delete_confirm', 1),
    'access callback' => 'election_candidate_access',
    'access arguments' => array('delete', 1),
    'file' => 'election-candidate.pages.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function election_candidate_menu_alter(&$items) {
  unset($items['admin/election/candidate/settings']);
  $items['admin/election/candidate/fields']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/fields']['description'] = t('Manage fields for election candidates.');
  $items['admin/election/candidate/display']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/display']['description'] = t('Manage display for election candidates.');
}

/**
 * Implements hook_field_extra_fields().
 */
function election_candidate_field_extra_fields() {
  $extra = array();
  $extra['election_candidate']['election_candidate'] = array(
    'form' => array(
      'post' => array(
        'label' => t('Post'),
        'description' => t('The post for this nomination.'),
        'weight' => 0,
      ),
      'first_name' => array(
        'label' => t('First name'),
        'description' => t('The candidate\'s first name(s).'),
        'weight' => 1,
      ),
      'last_name' => array(
        'label' => t('Last name'),
        'description' => t('The candidate\'s last name(s).'),
        'weight' => 2,
      ),
      'mail' => array(
        'label' => t('Email address'),
        'description' => t('The candidate\'s email address.'),
        'weight' => 3,
      ),
      'phone' => array(
        'label' => t('Phone number'),
        'description' => t('The candidate\'s phone number.'),
        'weight' => 4,
      ),
    ),
    'display' => array(
      'election' => array(
        'label' => t('Election'),
        'description' => t('The election for this nomination.'),
        'weight' => 0,
      ),
      'post' => array(
        'label' => t('Post'),
        'description' => t('The post/position for this nomination.'),
        'weight' => 1,
      ),
      'full-name' => array(
        'label' => t('Name'),
        'description' => t('The candidate\'s name.'),
        'weight' => 2,
      ),
    ),
  );
  return $extra;
}


/**
 * Title callback for election/%election_candidate/view (output should not be escaped here
 * as it is done later).
 *
 * @param stdClass $election
 * @param stdClass $candidate
 *
 * @return string
 */
function election_candidate_page_title($candidate) {
  return $candidate->first_name . ' ' . $candidate->last_name;
}

/**
 * Wrapper function to allow saving an election candidate.
 *
 * @param stdClass $candidate
 *   Election candidate object.
 * @return bool
 */
function election_candidate_save($candidate) {
  return entity_get_controller('election_candidate')->save($candidate);
}

/**
 * Wrapper function to allow deleting multiple candidates.
 *
 * @param array $candidate_ids
 *   Array of candidate IDs.
 * @return bool
 */
function election_candidate_delete_multiple(array $candidate_ids) {
  return entity_get_controller('election_candidate')->delete($candidate_ids);
}

/**
 * Wrapper function to allow deleting an individual election.
 *
 * @see election_candidate_delete_multiple()
 *
 * @param mixed $candidate_id
 *   Single candidate ID.
 * @return bool
 */
function election_candidate_delete($candidate_id) {
  return election_candidate_delete_multiple(array($candidate_id));
}


/*
 * Find the nominations (election_candidate entities) for a specified election
 * and user.
 *
 * @param stdClass $election
 *   Election object.
 * @param stdClass $account
 *   Optional $user object.
 *
 * @return
 *   FALSE if the account is anonymous, or a SelectQuery object.
 */
function election_candidate_get_user_nominations(stdClass $election, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  if ($account->uid == 0) {
    return array();
  }
  $select = db_query(
    'SELECT ec.*, ep.title AS post_title, ep.exclusive FROM {election_candidate} ec LEFT JOIN {election_post} ep USING (post_id) WHERE ec.uid = :uid AND ep.election_id = :eid',
    array(
      ':eid' => $election->election_id,
      ':uid' => $account->uid,
    )
  );
  return $select->fetchAll();
}

/*
 * Find the posts that a candidate may be nominated for.
 *
 * @param stdClass $election
 *   Election object.
 * @param array $nominations
 *   Array of the user's previous nominations (election_candidate objects).
 * @param stdClass $account
 *   User object.
 *
 * @return
 *   Array of post IDs.
 */
function election_candidate_get_available_posts(stdClass $election, $nominations = NULL, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }
  if ($nominations === NULL) {
    $nominations = election_candidate_get_user_nominations($election, $account);
  }
  $has_exclusive = FALSE;
  $prev_post_ids = array();
  foreach ($nominations as $nomination) {
    if ($nomination->exclusive) {
      $has_exclusive = TRUE;
    }
    $prev_post_ids[] = $nomination->post_id;
  }
  $select = db_select('election_post', 'ep')->fields('ep', array('post_id'));
  $select->condition('election_id', $election->election_id, '=');
  if ($prev_post_ids && !user_access('allow duplicate nominations')) {
    $select->condition('post_id', $prev_post_ids, 'NOT IN');
  }
  if ($has_exclusive && !user_access('bypass nomination exclusivity')) {
    $select->condition('exclusive', 0, '=');
  }
  $select->orderBy('title');
  $result = $select->execute();
  return $result->fetchCol();
}

/**
 * URI callback for a single election candidate.
 *
 * @return array
 */
function election_candidate_uri($candidate) {
  $path = 'election-candidate/' . $candidate->candidate_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/**
 * Return the path part of the election candidate URI callback as a string.
 *
 * @return string.
 */
function election_candidate_uri_path($candidate) {
  $uri = election_candidate_uri($candidate);
  return $uri['path'];
}

/**
 * Label callback for an election_candidate, returning the candidate's name.
 *
 * @param stdClass $entity
 * @param string $entity_type
 *
 * @return string
 */
function election_candidate_label(stdClass $entity, $entity_type) {
  return $entity->first_name . ' ' . $entity->last_name;
}

/**
 * Load an individual election candidate.
 *
 * @param mixed $candidate_id
 *   A single election candidate ID.
 *
 * @return stdClass
 *   A stdClass election_candidate object.
 */
function election_candidate_load($candidate_id = NULL) {
  $result = entity_load('election_candidate', (array) $candidate_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple candidates.
 *
 * @param mixed $candidate_ids
 *   An array of election candidate IDs.
 *
 * @return stdClass
 *   A stdClass election_candidate object.
 */
function election_candidate_load_multiple(array $candidate_ids = array()) {
  return entity_load('election_candidate', $candidate_ids);
}

/**
 * Implements hook_theme().
 */
function election_candidate_theme() {
  return array(
    'election_candidate' => array(
      'render element' => 'elements',
      'template' => 'election-candidate',
    ),
    'election_candidate_details' => array(
      'render element' => 'elements',
      'template' => 'election-candidate-details',
    ),
  );
}


/**
 * Process variables for election-candidate.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $candidate
 * - $election
 * - $view_mode
 * - $page
 *
 * @see election-candidate.tpl.php
 */
function template_preprocess_election_candidate(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // $teaser boolean
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  // $details boolean
  $variables['details'] = $variables['view_mode'] == 'details';
  // $page boolean
  $variables['page'] = ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'details');

  $variables['election'] = $variables['elements']['#election'];
  $variables['candidate'] = $variables['elements']['#candidate'];
  $variables['post'] = $variables['elements']['#post'];

  $election = $variables['election'];
  $candidate = $variables['candidate'];
  $post = $variables['post'];
  $election_type = _election_type_get_info($election->type);

  if (empty($post)) {
    // Handle gracefully when the candidate's post is deleted prematurely.
    $post = entity_get_controller('election_post')->create(array(
      'type' => $election_type['post key'],
    ));
  }

  $uri = election_candidate_uri($candidate);
  $variables['url'] = url($uri['path'], $uri['options']);

  $election_uri = entity_uri('election', $election);
  $variables['election_url'] = url($election_uri['path'], $election_uri['options']);
  $variables['election_title'] = check_plain($election->title);
  $variables['election_link'] = l($election->title, $election_uri['path'], $election_uri['options']);
  $variables['election_type'] = check_plain($election_type['name']);

  $post_uri = entity_uri('election_post', $post);
  $variables['post_url'] = url($post_uri['path'], $post_uri['options']);
  $variables['post_title'] = check_plain($post->title);
  $variables['post_link'] = l($post->title, $post_uri['path'], $post_uri['options']);
  $variables['post_name'] = check_plain($election_type['post name']);

  $variables['full_name'] = t('@first_name @last_name', array('@first_name' => $candidate->first_name, '@last_name' => $candidate->last_name));

  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('election_candidate', $candidate, $variables['content'], $variables);

  $variables['classes_array'][] = drupal_html_class('election-' . $election->type . '-candidate');

  $variables['theme_hook_suggestions'][] = 'election_candidate__' . $candidate->candidate_id;
  $variables['theme_hook_suggestions'][] = 'election__' . $election->type . '__candidate';
  $variables['theme_hook_suggestions'][] = 'election__' . $election->election_id . '__candidate';

}

/**
 * Process variables for election-candidate-details.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $candidate
 * - $election
 * - $page
 *
 * @see election-candidate.tpl.php
 */
function template_preprocess_election_candidate_details(&$variables) {

  $variables['election'] = $variables['elements']['#election'];
  $variables['candidate'] = $variables['elements']['#candidate'];
  $variables['post'] = $variables['elements']['#post'];

  $election = $variables['election'];
  $candidate = $variables['candidate'];
  $post = $variables['post'];
  $election_type = _election_type_get_info($election->type);

  if (empty($post)) {
    // Handle gracefully when the candidate's post is deleted prematurely.
    $post = entity_get_controller('election_post')->create(array(
      'type' => $election_type['post key'],
    ));
  }

  $uri = election_candidate_uri($candidate);
  $variables['url'] = url($uri['path'], $uri['options']);

  $election_uri = entity_uri('election', $election);
  $variables['election_url'] = url($election_uri['path'], $election_uri['options']);
  $variables['election_link'] = l($election->title, $election_uri['path'], $election_uri['options']);

  $post_uri = entity_uri('election_post', $post);
  $variables['post_url'] = url($post_uri['path'], $post_uri['options']);
  $variables['post_link'] = l($post->title, $post_uri['path'], $post_uri['options']);

  $variables['full_name'] = t('@first_name @last_name', array('@first_name' => $candidate->first_name, '@last_name' => $candidate->last_name));

  $variables['content']['election'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-election'),
    ),
    '#markup' => '<span class="label">' . t('Election:') . '</span>'
               . ' <span class="item">' . $variables['election_link'] . '</span>',
  );

  $variables['content']['post'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-post'),
    ),
    '#markup' => '<span class="label">' . drupal_ucfirst($election_type['post name'] . ':') . '</span>'
               . ' <span class="item">' . $variables['post_link'] . '</span>',
  );

  $variables['content']['full-name'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-full-name'),
    ),
    '#markup' => '<span class="label">' . t('Name:') . '</span>'
               . ' <span class="item">' . $variables['full_name'] . '</span>',
  );

  $variables['username'] = theme('username', array('#account' => $candidate->uid? user_load($candidate->uid) : NULL));
  $variables['phone'] = check_plain($candidate->phone);
  $variables['mail'] = l($candidate->mail, 'mailto:' . $candidate->mail, array('absolute' => TRUE));

  $variables['content']['mail'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-email-address')
    ),
    '#markup' => '<span class="label">' . t('Email address:') . '</span>'
               . ' <span class="item">' . $variables['mail'] . '</span>',
  );

  $variables['content']['phone'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-phone'),
    ),
    '#markup' => '<span class="label">' . t('Phone number:') . '</span>'
               . ' <span class="item">' . $variables['phone'] . '</span>',
  );

  $variables['content']['candidate-username'] = array(
    '#theme' => 'container',
    '#attributes' => array(
      'class' => array('pseudo-field', 'candidate-username'),
    ),
    '#markup' => '<span class="label">' . t('Username:') . '</span>'
               . ' <span class="item">' . $variables['username'] . '</span>',
  );

  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['classes_array'][] = drupal_html_class('election-' . $election->type . '-candidate', 'election-candidate-details');

  $variables['theme_hook_suggestions'][] = 'election_candidate_details__' . $candidate->candidate_id;
  $variables['theme_hook_suggestions'][] = 'election__' . $election->type . '__candidate_details';
  $variables['theme_hook_suggestions'][] = 'election__' . $election->election_id . '__candidate_details';

}

/**
 * Internal function to format the status field of an election candidate for display.
 *
 * @todo make this themeable
 *
 * @param stdClass $candidate
 *
 * @return string
 */
function _election_candidate_format_status(stdClass $candidate) {
  switch ($candidate->cstatus) {
    case ELECTION_CANDIDATE_APPROVED:
      return t('Approved');
      break;
    case ELECTION_CANDIDATE_REJECTED:
      return t('Nomination rejected');
      break;
    case ELECTION_CANDIDATE_WITHDRAWN:
      return t('Withdrawn');
      break;
    case ELECTION_CANDIDATE_PENDING:
    default:
      return t('Pending approval');
      break;
  }
}

/**
 * Implements hook_entity_update().
 */
function election_candidate_entity_update($entity, $type) {
  switch ($type) {
    case 'election_candidate':
      if (module_exists('pathauto')) {
        pathauto_election_candidate_update_alias($entity, 'update');
      }
    break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function election_candidate_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated candidates when an election is deleted.
    case 'election':
      $candidate_ids = db_query('SELECT candidate_id FROM {election_candidate} WHERE election_id = :eid', array(':eid' => $entity->election_id))->fetchCol();
      election_candidate_delete_multiple($candidate_ids);
    break;
    // Clear the post_id property of associated candidates when a post is deleted.
    case 'election_post':
      $update = db_update('election_candidate')
        ->fields(array('post_id' => NULL))
        ->condition('post_id', $entity->post_id)
        ->execute();
    break;
    // Delete Pathauto path aliases when a candidate is deleted.
    case 'election_candidate':
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election_candidate', $entity);
      }
    break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function election_candidate_entity_insert($entity, $type) {
  switch ($type) {
    case 'election_candidate':
      if (module_exists('pathauto')) {
        pathauto_election_candidate_update_alias($entity, 'insert');
      }
    break;
  }
}

/*
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to a candidate
 * entity via a file field.
 *
 * @param string $field
 * @param string $entity_type
 * @param stdClass $entity
 */
function election_candidate_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election_candidate') {
    return election_candidate_access('view', $entity);
  }
}

/**
 * Update the URL aliases for an individual election candidate.
 *
 * @param $candidate
 *   An election candidate object.
 * @param $op
 *   Operation being performed on the candidate ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_candidate_update_alias(stdClass $candidate, $op, array $options = array()) {
  // Skip processing if the candidate has no pattern.
  if (!pathauto_pattern_load_by_entity('election_candidate', 'election_candidate')) {
    return;
  }
  $election = election_load($candidate->election_id);
  if (!$election) {
    watchdog('election_candidate', 'Could not update candidate alias: election ID @id could not be loaded', array('@id' => $candidate->election_id), WATCHDOG_WARNING);
    return;
  }
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election_candidate',
    $op,
    election_candidate_uri_path($candidate),
    array('election_candidate' => $candidate, 'election' => $election),
    'election_candidate'
  );
}

/**
 * Update the URL aliases for multiple election candidates.
 *
 * @param $candidate_ids
 *   An array of election candidate IDs.
 * @param $op
 *   Operation being performed on the candidates ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_candidate_update_alias_multiple(array $candidate_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $candidates = election_candidate_load_multiple($candidate_ids);
  foreach ($candidates as $candidate) {
    pathauto_election_candidate_update_alias($candidate, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($candidate_ids), 'Updated URL alias for 1 candidate.', 'Updated URL aliases for @count candidates.'));
  }
}

/**
 * Implements hook_views_api().
 */
function election_candidate_views_api() {
  return array(
    'api' => 3,
  );
}

/*
 * Implements hook_views_default_views().
 */
function election_candidate_views_default_views() {
  $views_dir = drupal_get_path('module', 'election_candidate') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}
