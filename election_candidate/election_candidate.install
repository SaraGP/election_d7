<?php
/**
 * @file
 * Install functions for the Election Candidate module.
 */

require_once 'election_candidate.constants.inc';

/**
 * Implements hook_schema().
 */
function election_candidate_schema() {

  $schema = array();

  $schema['election_candidate'] = array(
    'description' => 'The candidates table for the election module.',
    'fields' => array(
      'candidate_id' => array(
        'description' => 'Primary key: identifier for a candidate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'post_id' => array(
        'description' => 'The post for which the candidate is standing. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'election_id' => array(
        'description' => 'The election in which the candidate is standing. Relates to {election}.election_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The {election_candidate_type}.type of this candidate.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'published' => array(
        'description' => 'Allows anyone who can view the election to view this candidate.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      // Using 'status' as a column name would cause Entity API confusion.
      'cstatus' => array(
        'description' => sprintf(
          'The candidate\'s status: withdrawn %d, rejected %d, hopeful %d, defeated %d, or elected %d.',
          ELECTION_CANDIDATE_WITHDRAWN,
          ELECTION_CANDIDATE_REJECTED,
          ELECTION_CANDIDATE_HOPEFUL,
          ELECTION_CANDIDATE_DEFEATED,
          ELECTION_CANDIDATE_ELECTED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_CANDIDATE_HOPEFUL,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the candidate.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'username' => array(
        'description' => 'The {users}.name of the candidate.',
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
      ),
      'first_name' => array(
        'description' => 'The candidate\'s first name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'last_name' => array(
        'description' => 'The candidate\'s last name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'mail' => array(
        'description' => 'The candidate\'s e-mail address.',
        'type' => 'varchar',
        'length' => 254,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the candidate was created/nominated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the candidate was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('candidate_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'uid' => array('uid'),
      'published' => array('published'),
      'first_name' => array('first_name'),
      'last_name' => array('last_name'),
      'mail' => array('mail'),
      'created' => array('created'),
      'cstatus' => array('cstatus'),
    ),
    'foreign keys' => array(
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => 'election_candidate_type',
        'columns' => array('type' => 'type'),
      ),
    ),
  );

  $schema['election_candidate_type'] = array(
    'description' => 'Stores information about defined candidate types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique candidate type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this type in relation to others.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => ENTITY_CUSTOM,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this candidate type.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;

}

/**
 * Implements hook_schema_alter().
 */
function election_candidate_schema_alter(&$schema) {

  // Add candidate_id as a foreign key on the ballot table.
  $schema['election_ballot']['foreign keys']['candidate'] = array(
    'table' => 'election_candidate',
    'columns' => array('candidate_id' => 'candidate_id'),
  );

}

/**
 * Copy field instances from old single bundle to new per-election bundles.
 */
function election_candidate_update_7001() {
  $instances = field_info_instances('election_candidate', 'election_candidate');
  $bundles = _election_candidate_get_bundles();
  foreach ($instances as $field_name => $instance) {
    if ($instance['deleted']) {
      continue;
    }
    foreach ($bundles as $bundle_name) {
      $instance['bundle'] = $bundle_name;
      if (!field_info_instance('election_candidate', $field_name, $bundle_name)) {
        field_create_instance($instance);
        watchdog('election_candidate', 'Created instance of the field @field_name for the bundle @bundle_name.', array('@field_name' => $field_name, '@bundle_name' => $bundle_name));
      }
    }
  }
}

/**
 * Add the new candidate types schema.
 */
function election_candidate_update_7002() {
  $schema['election_candidate_type'] = array(
    'description' => 'Stores information about defined candidate types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique candidate type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this type in relation to others.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => ENTITY_CUSTOM,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this candidate type.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );
  db_create_table('election_candidate_type', $schema['election_candidate_type']);
}

/**
 * Add the 'type' column to the election_candidate table.
 */
function election_candidate_update_7003() {
  db_add_field('election_candidate', 'type', array(
    'description' => 'The {election_candidate_type}.type of this candidate.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Bundle candidates by type rather than by election.
 */
function election_candidate_update_7004() {

  // Select old candidate bundles. These will be any for which a candidate
  // exists with an empty 'type' column. The election ID was the old bundle.
  $election_ids = db_query(
    'SELECT DISTINCT election_id FROM {election_candidate} WHERE LENGTH(type) = 0'
  )->fetchCol();

  if (empty($election_ids)) {
    // Nothing to do.
    return;
  }

  // Load elections so that we can grab the titles later.
  $election_titles = db_query(
    'SELECT election_id, title FROM {election} WHERE election_id IN (:ids)',
    array(':ids' => $election_ids)
  )->fetchAllKeyed();

  foreach ($election_ids as $eid) {

    // Name bundles as 'election_%' where % is the election ID.
    $new_bundle = 'election_' . $eid;
    db_update('election_candidate')
      ->fields(array('type' => $new_bundle))
      ->condition('election_id', $eid)
      ->condition('type', '')
      ->execute();
    field_attach_rename_bundle('election_candidate', $eid, $new_bundle);

    // Create the new candidate type. Name it after the election it came from.
    $type_settings = array(
      'type' => $new_bundle,
      'label' => t('Type for "@election"', array(
        '@election' => !empty($election_titles[$eid]) ? truncate_utf8($election_titles[$eid], 80) : $eid,
      )),
      'module' => 'election_candidate',
    );
    $candidate_type = entity_get_controller('election_candidate_type')->create($type_settings);
    $candidate_type->save();

    // Update post settings so that they attach to this candidate bundle.
    $post_ids = db_query('SELECT DISTINCT post_id FROM {election_candidate} WHERE type = :bundle', array(':bundle' => $new_bundle))->fetchCol();
    if (!empty($post_ids)) {
      $posts = election_post_load_multiple($post_ids);
      foreach ($posts as $post) {
        $post->settings['candidate_type'] = $new_bundle;
        election_post_save($post);
      }
    }

    watchdog('election_candidate', 'Created new candidate type: @new.', array('@new' => $new_bundle));
  }
}

/**
 * Add the 'published' column to the election_candidate table.
 */
function election_candidate_update_7005() {
  db_add_field('election_candidate', 'published', array(
    'description' => 'Allows anyone who can view the election to view this candidate.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add an index to the 'published' column.
 */
function election_candidate_update_7006() {
  db_add_index('election_candidate', 'published', array('published'));
}

/**
 * Update candidate status field.
 */
function election_candidate_update_7007() {
  // Recreate the 'cstatus' field and index.
  db_drop_index('election_candidate', 'cstatus');
  db_change_field(
    'election_candidate',
    'cstatus',
    'cstatus',
    array(
      'description' => sprintf(
        'The candidate\'s status: withdrawn %d, rejected %d, hopeful %d, defeated %d, or elected %d.',
        ELECTION_CANDIDATE_WITHDRAWN,
        ELECTION_CANDIDATE_REJECTED,
        ELECTION_CANDIDATE_HOPEFUL,
        ELECTION_CANDIDATE_DEFEATED,
        ELECTION_CANDIDATE_ELECTED
      ),
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => ELECTION_CANDIDATE_HOPEFUL,
    ),
    array(
      'indexes' => array(
        'cstatus' => array('cstatus'),
      ),
    )
  );
  // Update all 'pending approval' statuses to 'hopeful'.
  db_update('election_candidate')
    ->fields(array('cstatus' => ELECTION_CANDIDATE_HOPEFUL))
    ->condition('cstatus', 0)
    ->execute();
}

/**
 * Set the 'show_candidates_tab' setting to 1 on existing elections.
 */
function election_candidate_update_7101() {
  $election_ids = db_select('election')
    ->fields('election', array('election_id'))
    ->execute()
    ->fetchCol();
  $elections = election_load_multiple($election_ids);
  foreach ($elections as $election) {
    if (!election_candidate_check_support($election)) {
      continue;
    }
    if (!isset($election->settings['show_candidates_tab'])) {
      $election->settings['show_candidates_tab'] = 1;
      election_save($election);
    }
  }
}
