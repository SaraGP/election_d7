<?php
/**
 * @file
 * Main file for the Election Result module.
 */

/**
 * Implements hook_menu().
 */
function election_results_menu() {
  $items = array();
  $items['election-post/%election_post/results'] = array(
    'title' => 'Results',
    'page callback' => 'election_results_page',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['election-post/%election_post/results/view'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function election_results_permission() {
  return array(
    'view any election results' => array(
      'title' => t('View any election results'),
      'description' => t('This allows the user to view the results of any election posts.'),
    ),
    'view own election results' => array(
      'title' => t('View own election results'),
      'description' => t('This allows the user to view the results of their own election posts (those to which they have editing access).'),
    ),
  );
}

/**
 * Access callback for viewing results per election post.
 */
function election_results_access($op, stdClass $post, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  if ($op == 'view') {
    // The user has to have permission to view the post itself.
    if (!election_post_access('view', $post, $account)) {
      return FALSE;
    }
    // Prevent users from viewing results while voting is open, unless they can
    // 'bypass running election lock'.
    if (_election_post_is_open($post) && !user_access('bypass running election lock', $account)) {
      return FALSE;
    }
    if ($post->election->uid == $account->uid && user_access('view own election results', $account)) {
      return TRUE;
    }
    if (user_access('view any election results', $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Page callback for election-post/%election_post/results.
 *
 * @todo make this themeable
 */
function election_results_page(stdClass $post) {

  $election = $post->election;

  drupal_set_title(t('Results: %post', array('%post' => $post->title)), PASS_THROUGH);
  election_set_breadcrumb($election);

  $output = array();

  // Get the number of ballots for this post.
  $query = db_select('election_ballot');
  $query->addExpression('COUNT(ballot_id)');
  $query->condition('post_id', $post->post_id);
  $ballot_count = $query->execute()->fetchField();

  if (!$ballot_count) {
    return array(
      '#markup' => '<p>' . t('No ballots have been cast for this @post.', array('@post' => election_get_post_name($election->type))) . '</p>',
    );
  }

  // Get the total number of votes and abstentions for the post.
  $query = db_select('election_vote');
  $query->addExpression('COUNT(DISTINCT IF(abstain = 0, ballot_id, NULL))', 'votes');
  $query->addExpression('COUNT(DISTINCT IF(abstain = 1, ballot_id, NULL))', 'abstentions');
  $query->condition('post_id', $post->post_id);
  $totals = $query->execute()->fetch();

  if ($totals->votes == 0 && $totals->abstentions == 0) {
    return $output;
  }

  $header = array(
    'ballots' => t('Ballots'),
    'votes' => t('Votes'),
    'abstentions' => t('Abstentions'),
  );

  $rows = array();
  $rows[0] = array(
    'ballots' => number_format($ballot_count),
    'votes' => number_format($totals->votes),
    'abstentions' => number_format($totals->abstentions),
  );

  $output['totals'] = array(
    '#theme' => 'table',
    '#caption' => t('Totals'),
    '#header' => $header,
    '#rows' => $rows,
  );

  drupal_alter('election_results_page', $output, $post, $totals);

  return $output;

}
