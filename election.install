y<?php
/**
 * @file
 *   Install functions for the Election module.
 */

// Constants, to be stored in TINYINT database columns.

// Constants for the {election} table.
define('ELECTION_TYPE_REFERENDUM', 'referendum');
define('ELECTION_TYPE_STV', 2);
define('ELECTION_STATUS_CLOSED', -1);
define('ELECTION_STATUS_AUTO', 0);
define('ELECTION_STATUS_OPEN', 1);

// Constants for the {election_ballot} table.
define('ELECTION_ANSWER_NO', -1);
define('ELECTION_ANSWER_ABSTAIN', 0);
define('ELECTION_ANSWER_YES', 1);

// Constants for the {election_endorser} table.
define('ELECTION_ENDORSER_TYPE_PROPOSER', 1);
define('ELECTION_ENDORSER_TYPE_SECONDER', 2);

/**
 * Implements hook_schema().
 */
function election_schema() {

  $schema = array();

  $schema['election'] = array(
    'description' => 'The main table for the election module.',
    'fields' => array(
      'election_id' => array(
        'description' => 'Primary key: identifier for an election.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the election (machine name).',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => ELECTION_TYPE_REFERENDUM,
      ),
      'status' => array(
        'description' => sprintf(
          'The voting status: open %d, closed %d, or auto %d.',
          ELECTION_STATUS_OPEN,
          ELECTION_STATUS_CLOSED,
          ELECTION_STATUS_AUTO
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_STATUS_AUTO,
      ),
      'anonymous' => array(
        'description' => 'Whether or not votes in this election are anonymous.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'open_time' => array(
        'description' => 'The Unix timestamp for when voting opens.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'close_time' => array(
        'description' => 'The Unix timestamp for when voting closes.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'name' => array(
        'description' => 'The name of the election - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A human-readable description of the election.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the election was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the election was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('election_id'),
    'indexes' => array(
      'type' => array('type'),
      'status' => array('status'),
      'voting_period' => array('open_time', 'close_time'),
      'created' => array('created'),
      'name' => array('name'),
    ),
  );

  $schema['election_post'] = array(
    'description' => 'The posts table for the election module. Post types: electoral position, referendum motion.',
    'fields' => array(
      'post_id' => array(
        'description' => 'Primary key: identifier for a post.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'election_id' => array(
        'description' => 'The {election}.election_id for this post.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'allow_abstention' => array(
        'description' => 'For a motion: whether or not to allow voters to abstain.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'require_manifesto' => array(
        'description' => 'For a position: whether or not to require a candidate manifesto.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'require_phone' => array(
        'description' => 'For a position: whether or not to require a candidate phone number.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'require_photo' => array(
        'description' => 'For a position: whether or not to require a candidate photograph.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'require_proposer' => array(
        'description' => 'For a position: whether or not to require the candidate to have a proposer.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'vacancy_count' => array(
        'description' => 'For a position: the number of vacancies.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'use_ron' => array(
        'description' => 'For a position: whether or not RON (Re-Open Nominations)'
                       . ' is to be provided as a candidate. This is ignored if'
                       . ' {election_post}.vacancy_count > 1.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'title' => array(
        'description' => 'The title of the position or motion.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A human-readable description of the position or motion.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the post was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the post was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('post_id'),
    'indexes' => array(
      'use_ron' => array('use_ron'),
      'created' => array('created'),
      'title' => array('title'),
      'election_id' => array('election_id'),
    ),
    'foreign keys' => array(
      'post_election' => array(
        'table' => 'election',
        'columns' => array('election_id' => 'election_id'),
      ),
    ),
  );

  $schema['election_post_electorate'] = array(
    'description' => 'Table mapping electorates to posts, for the election module.',
    'fields' => array(
      'post_id' => array(
        'description' => 'Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'electorate_id' => array(
        'description' => 'Relates to {election_electorate}.electorate_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'posts_electorates' => array('post_id', 'electorate_id'),
    ),
    'foreign keys' => array(
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'electorate' => array(
        'table' => 'election_electorate',
        'columns' => array('electorate_id' => 'electorate_id'),
      ),
    ),
  );

  $schema['election_electorate'] = array(
    'description' => 'The electorates table for the election module. An electorate is a group of eligible voters.',
    'fields' => array(
      'electorate_id' => array(
        'description' => 'Primary key: identifier for an electorate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'conditions' => array(
        'description' => 'A serialized array of conditions, all of which users must pass to be part of the electorate.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
      'name' => array(
        'description' => 'The name of the electorate - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the electorate was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the electorate was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('electorate_id'),
    'indexes' => array(
      'created' => array('created'),
      'name' => array('name'),
    ),
  );

  $schema['election_ballot'] = array(
    'description' => 'The ballots table for the election module.',
    'fields' => array(
      'ballot_id' => array(
        'description' => 'Primary key: identifier for a ballot.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vote_id' => array(
        'description' => 'For tracked (non-anonymous) voting. Relates to {election_vote}.vote_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'post_id' => array(
        'description' => 'For referendums: the motion being answered. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'answer' => array(
        'description' => sprintf(
          'For referendums: the answer (no %d, yes %d, or abstain %d).',
          ELECTION_ANSWER_NO,
          ELECTION_ANSWER_YES,
          ELECTION_ANSWER_ABSTAIN
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'candidate_id' => array(
        'description' => 'For STV elections: the candidate being ranked.'
                      . ' Relates to {election_candidate}.candidate_id.'
                      . ' Ignored if {election_ballot}.ron = 1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ron' => array(
        'description' => 'For STV elections: whether or not the candidate being ranked is RON (Re-Open Nominations).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'rank' => array(
        'description' => 'For STV elections: the rank of the candidate in the ballot.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('ballot_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'candidate_id' => array('candidate_id'),
      'rank' => array('rank'),
      'ron' => array('ron'),
    ),
    'foreign keys' => array(
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'candidate' => array(
        'table' => 'election_candidate',
        'columns' => array('candidate_id' => 'candidate_id'),
      ),
      'vote' => array(
        'table' => 'election_vote',
        'columns' => array('vote_id' => 'vote_id'),
      ),
    ),
  );

  $schema['election_vote'] = array(
    'description' => 'The votes table for the election module. This'
                  . ' records the act of voting, but not the voting'
                  . ' preferences (see the {election_ballot} table).',
    'fields' => array(
      'vote_id' => array(
        'description' => 'Primary key: identifier for a vote.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'post_id' => array(
        'description' => 'The post for which the vote has been made. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the voter.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ipv4' => array(
        'description' => 'The IPv4 address of the voter. If null, there should be an IPv6 address.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ipv6' => array(
        'description' => 'The IPv6 address of the voter. If null, there should be an IPv4 address.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'agent' => array(
        'description' => 'The HTTP User Agent of the voter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sid_hash' => array(
        'description' => 'An MD5 hash of the voter\'s session ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'vote_time' => array(
        'description' => 'A UNIX timestamp for when the vote was cast.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vote_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'uid' => array('uid'),
      'agent' => array('agent'),
      'vote_time' => array('vote_time'),
    ),
    'foreign keys' => array(
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['election_candidate'] = array(
    'description' => 'The candidates table for the election module.',
    'fields' => array(
      'candidate_id' => array(
        'description' => 'Primary key: identifier for a candidate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'post_id' => array(
        'description' => 'The post for which the candidate is standing. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the candidate.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'phone' => array(
        'description' => 'The phone number of the candidate.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
      ),
      'summary' => array(
        'description' => 'The candidate\'s manifesto summary paragraph.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('candidate_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['election_endorser'] = array(
    'description' => 'The endorsers (proposers/seconders) table for the election module.',
    'fields' => array(
      'endorser_id' => array(
        'description' => 'Primary key: identifier for a endorser.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'candidate_id' => array(
        'description' => 'The candidate being endorsed. Relates to {election_candidate}.candidate_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => sprintf(
          'The type of the endorser (proposer %d, seconder %d)',
          ELECTION_ENDORSER_TYPE_PROPOSER,
          ELECTION_ENDORSER_TYPE_SECONDER
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_ENDORSER_TYPE_PROPOSER,
      ),
      'first_name' => array(
        'description' => 'The first name of the endorser.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'last_name' => array(
        'description' => 'The last name of the endorser.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'email' => array(
        'description' => 'The email address of the endorser.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'notes' => array(
        'description' => 'Any optional notes about the endorser.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('endorser_id'),
    'indexes' => array(
      'names' => array('first_name', 'last_name'),
      'candidate_id' => array('candidate_id'),
      'type' => array('type'),
      'email' => array('email'),
    ),
    'foreign keys' => array(
      'candidate' => array(
        'table' => 'election_candidate',
        'columns' => array('candidate_id' => 'candidate_id'),
      ),
    ),
  );

  return $schema;

}

/**
 * Implements hook_enable().
 *
 * Sets up foreign key constraints for a MySQL/InnoDB database.
 */
function election_enable() {

  if (db_driver() != 'mysql') {
    watchdog(
      'election',
      'Cannot set up foreign key constraints: the database driver would need to be MySQL.'
    );
    return;
  }

  if (!_election_db_tables_exist()) {
    watchdog(
      'election',
      'Cannot set up foreign key constraints: the database tables do not (all) exist.'
    );
    return;
  }

  try {

    // Foreign keys for {election_post}.
    db_query('ALTER TABLE {election_post} ADD FOREIGN KEY (`election_id`) REFERENCES {election} (`election_id`) ON UPDATE CASCADE');

    // Foreign keys for {election_post_electorate}.
    db_query('ALTER TABLE {election_post_electorate} ADD FOREIGN KEY (`post_id`) REFERENCES {election_post} (`post_id`) ON UPDATE CASCADE');
    db_query('ALTER TABLE {election_post_electorate} ADD FOREIGN KEY (`electorate_id`) REFERENCES {election_electorate} (`electorate_id`) ON UPDATE CASCADE');

    // Foreign keys for {election_ballot}.
    db_query('ALTER TABLE {election_ballot} ADD FOREIGN KEY (`post_id`) REFERENCES {election_post} (`post_id`) ON UPDATE CASCADE');
    db_query('ALTER TABLE {election_ballot} ADD FOREIGN KEY (`vote_id`) REFERENCES {election_vote} (`vote_id`) ON UPDATE CASCADE');
    db_query('ALTER TABLE {election_ballot} ADD FOREIGN KEY (`candidate_id`) REFERENCES {election_candidate} (`candidate_id`) ON UPDATE CASCADE');

    // Foreign keys for {election_candidate}.
    db_query('ALTER TABLE {election_candidate} ADD FOREIGN KEY (`post_id`) REFERENCES {election_post} (`post_id`) ON UPDATE CASCADE');
    db_query('ALTER TABLE {election_candidate} ADD FOREIGN KEY (`uid`) REFERENCES {users} (`uid`) ON UPDATE CASCADE');

    // Foreign keys for {election_endorser}.
    db_query('ALTER TABLE {election_endorser} ADD FOREIGN KEY (`candidate_id`) REFERENCES {election_candidate} (`candidate_id`) ON UPDATE CASCADE');

    // Foreign keys for {election_vote}.
    db_query('ALTER TABLE {election_vote} ADD FOREIGN KEY (`post_id`) REFERENCES {election_post} (`post_id`) ON UPDATE CASCADE');
    db_query('ALTER TABLE {election_vote} ADD FOREIGN KEY (`uid`) REFERENCES {users} (`uid`) ON UPDATE CASCADE');

  } catch (Exception $e) {

    watchdog(
      'election',
      'Cannot set up foreign key constraints: database error.',
      $e->getError()
    );

  }

}

/**
 * Implements hook_uninstall().
 *
 * Delete tables in an order that satisfies foreign key integrity constraints.
 */
function election_uninstall() {
  db_query('DROP TABLE IF EXISTS {election_endorser}, {election_ballot}, {election_vote}, {election_candidate}, {election_post_electorate}, {election_electorate}, {election_post}, {election}');
}

/**
 * Check whether or not all the database tables for this module exist.
 *
 * @return bool
 */
function _election_db_tables_exist() {
  foreach (array_keys(election_schema()) as $table) {
    if (!db_table_exists($table)) {
      return FALSE;
    }
  }
  return TRUE;
}
