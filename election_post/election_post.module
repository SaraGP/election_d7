<?php
/**
 * @file
 * Election Post: primary module file.
 */

/**
 * Implements hook_menu().
 */
function election_post_menu() {

  $items = array();

  foreach (election_types() as $type_mn => $type) {
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name = _election_get_posts_name($type_mn);
      $post_name_plural = _election_get_posts_name($type_mn, TRUE);
      $items['admin/election/' . $type_mn . '/' . $post_key] = array(
        'title' => drupal_ucfirst($post_name) . ' settings',
        'title callback' => 'check_plain',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer elections'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'description' => 'Manage fields and display settings for ' . $post_name_plural . '.',
      );
    }
  }

/*
  $items['election/%election/posts'] = array(
    'title callback' => 'election_post_list_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_list_page',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('view', 1),
    'file' => 'election-post.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/posts/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  */

  $items['election/%election/posts'] = array(
    'title callback' => 'election_post_manage_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_manage_form', 1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/posts/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/posts/manage/add'] = array(
    'title' => 'Add new',
    'page callback' => 'election_post_page_add',
    'page arguments' => array(1),
    'access callback' => 'election_post_access',
    'access arguments' => array('create', 1),
    'file' => 'election-post.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['election-post/%election_post'] = array(
    'title callback' => 'election_post_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_post_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['election-post/%election_post/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election-post/%election_post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_post_page_edit',
    'page arguments' => array(1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_post_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election-post/%election_post/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_form_delete_confirm', 1),
    'access callback' => 'election_post_access',
    'access arguments' => array('delete', 1),
    'file' => 'election-post.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['election-post/%election_post/vote'] = array(
    'title' => 'Vote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_vote_form', 1),
    'file' => 'election-post.pages.inc',
    'access callback' => 'election_post_access',
    'access arguments' => array('vote', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 3,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_post_menu_alter(&$items) {
  $election_types = election_types();
  foreach (election_types() as $type_mn => $type) {
    $path = 'admin/election/' . $type_mn;
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name_plural = _election_get_posts_name($type_mn, TRUE);
      $items[$path . '/' . $post_key]['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/fields']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/fields']['description'] = t(
        'Manage fields for %type @posts_name_plural.',
        array(
          '%type' => $type['name'],
          '@posts_name_plural' => $post_name_plural,
        )
      );
      $items[$path . '/' . $post_key . '/display']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/display/full']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/display/teaser']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/display']['description'] = t(
        'Manage display for %type @posts_name_plural.',
        array(
          '%type' => $type['name'],
          '@posts_name_plural' => $post_name_plural,
        )
      );
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function election_post_entity_info() {

  $entities = array();

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'access callback' => 'election_post_access',
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election_post',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_types() as $type_mn => $type) {
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name = _election_get_posts_name($type_mn);
      $entities['election_post']['bundles'][$post_key] = array(
        'label' => drupal_ucfirst($post_name),
        'admin' => array(
          'path' => 'admin/election/' . $type_mn . '/' . $post_key,
          'real path' => 'admin/election/' . $type_mn . '/' . $post_key,
          'bundle argument' => 3,
          'access arguments' => array('administer elections'),
        ),
        'metatags' => FALSE, // for the Metatags module
      );
    }
  }

  return $entities;
}

/**
 * Determines whether the given user has access to a post.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally a post to check access for. If nothing is given, access for all
 *   posts is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_post_access($op, $post = NULL, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  // Allow other modules to block access (by implementing hook_election_post_access() and returning FALSE).
  $hook_results = module_invoke_all('election_post_access', $op, $post, $account);
  foreach ($hook_results as $hook_result) {
    if ($hook_result === FALSE) {
      return FALSE;
    }
  }
  $election = empty($post)? NULL : election_load($post->election_id);
  switch ($op) {
    case 'view':
      return election_access($op, $election, $account);
      break;
    case 'create':
    case 'update':
    case 'edit':
    case 'delete':
      return election_access('edit', $election, $account);
      break;
    case 'vote':
      if (!election_access('vote', $election, $account)) {
        return FALSE;
      }
      if (empty($post)) {
        return FALSE;
      }
      $role_int = array_intersect(array_keys($account->roles), (array) $post->rids);
      $role_access = (bool) count($role_int);
      if (!$role_access) {
        return FALSE;
      }
      return TRUE;
      break;
  }
  return FALSE;
}

/**
 * URI callback for a single election post.
 *
 * @return array
 */
function election_post_uri($post) {
  $path = 'election-post/' . $post->post_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/**
 * Return the path part of the election post URI callback as a string.
 *
 * @return string.
 */
function election_post_uri_path($post) {
  $uri = election_post_uri($post);
  return $uri['path'];
}

/**
 * Load an individual election post.
 *
 * @param mixed $post_id
 *   A single election post ID.
 *
 * @return stdClass
 *   A stdClass post object.
 */
function election_post_load($post_id = NULL) {
  $result = entity_load('election_post', (array) $post_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple posts.
 *
 * @param mixed $post_ids
 *   An array of post IDs.
 *
 * @return stdClass
 *   A stdClass election_post object.
 */
function election_post_load_multiple(array $post_ids = array()) {
  return entity_load('election_post', $post_ids);
}


/**
 * Wrapper function to allow deleting multiple election posts.
 *
 * @param array $post_ids
 *   Array of post IDs.
 * @return bool
 */
function election_post_delete_multiple(array $post_ids) {
  return entity_get_controller('election_post')->delete($post_ids);
}

/**
 * Wrapper function to allow deleting an individual election post.
 *
 * @see election_post_delete_multiple()
 *
 * @param mixed $post_id
 *   Single post ID.
 * @return bool
 */
function election_post_delete($post_id) {
  return election_post_delete_multiple(array($post_id));
}

/**
 * Implements hook_entity_insert().
 */
function election_post_entity_insert($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        pathauto_election_post_update_alias($entity, 'insert');
      }
    break;
  }
}

/**
 * Implements hook_entity_update().
 */
function election_post_entity_update($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        pathauto_election_post_update_alias($entity, 'update');
      }
    break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function election_post_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated posts when an election is deleted.
    case 'election':
      $post_ids = db_query('SELECT post_id FROM {election_post} WHERE election_id = :eid', array(':eid' => $entity->election_id))->fetchCol();
      election_post_delete_multiple($post_ids);
    break;
    // Delete Pathauto path aliases when a post is deleted.
    case 'election_post':
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election_post', $entity);
      }
    break;
  }
}

/**
 * Wrapper function to allow saving an election post.
 *
 * @param stdClass $post
 *   Election post object.
 * @return bool
 */
function election_post_save($post) {
  return entity_get_controller('election_post')->save($post);
}

/**
 * Title callback for election/%election/posts/manage (output should not
 * be escaped here as it is done later).
 *
 * @param stdClass $election
 *
 * @return string
 */
function election_post_list_page_title($election) {
  return drupal_ucfirst(_election_get_posts_name($election->type, TRUE));
}

/**
 * Title callback for election/%election/posts/manage (output should not
 * be escaped here as it is done later).
 *
 * @param stdClass $election
 *
 * @return string
 */
function election_post_manage_page_title($election) {
  return t('Manage @posts_name', array('@posts_name' => _election_get_posts_name($election->type, TRUE)));
}

/**
 * Title callback for election-post/%election_post (output should not
 * be escaped here as it is done later).
 *
 * @param stdClass $election
 * @param stdClass $post
 *
 * @return string
 */
function election_post_page_title($post) {
  return $post->title;
}

/**
 * Implements hook_theme().
 */
function election_post_theme() {
  return array(
    'election_post' => array(
      'render element' => 'elements',
      'template' => 'election-post',
    ),
  );
}

/**
 * Generate an array for rendering the given election post.
 *
 * @param $election
 *   An election object.
 * @param $post
 *   An election post object.
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 *
 * @return
 *   An array as expected by drupal_render().
 */
function election_post_view($election, $post, $view_mode = 'full') {

  // Remove previously built content, if it exists.
  $post->content = array();

  if ($view_mode == 'teaser') {
    $post->content['title'] = array(
      '#markup' => filter_xss($post->title),
      '#weight' => -5,
    );
  }
  else {
    drupal_set_title($post->title);
  }

  // Build fields content.
  // In case of a multiple view, node_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('election_post', array($post->post_id => $post), $view_mode);
  entity_prepare_view('election_post', array($post->post_id => $post));
  $post->content += field_attach_view('election_post', $post, $view_mode);

  $build = $post->content;
  // We don't need duplicate rendering info in post->content.
  unset($post->content);

  $build += array(
    '#theme' => 'election_post',
    '#election' => $election,
    '#post' => $post,
    '#view_mode' => $view_mode,
  );

  // Add contextual links for this post, except when the post is already being
  // displayed on its own page. Modules may alter this behavior (for example,
  // to restrict contextual links to certain view modes) by implementing
  // hook_post_view_alter().
  if (!empty($post->post_id) && $view_mode != 'full') {
    $build['#contextual_links']['election_post'] = array('election_post', array($post->post_id));
  }

  // Allow modules to modify the structured post.
  $type = 'election_post'; // $type is passed by reference to drupal_alter() so it must be a variable.
  drupal_alter(array('election_post_view', 'entity_view'), $build, $type);

  return $build;

}

/**
 * Process variables for election-post.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $election
 * - $view_mode
 * - $page
 *
 * @see election-post.tpl.php
 */
function template_preprocess_election_post(&$variables) {

  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';

  $variables['election'] = $variables['elements']['#election'];
  $election = $variables['election'];

  $variables['post'] = $variables['elements']['#post'];
  $post = $variables['post'];

  $uri = entity_uri('election_post', $post);
  $variables['election_post_url'] = url($uri['path'], $uri['options']);
  $variables['title'] = check_plain($post->title);
  $variables['page'] = $variables['view_mode'] == 'full';
  $variables['exclusivity'] = $post->exclusive? t('This is an exclusive position.') : t('This is not an exclusive position.');
  $variables['exclusivity_help'] = t('Candidates may only stand for one exclusive position per election.');

  // Flatten the post object's member fields.
  $variables = array_merge((array) $post, $variables);

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('election_post', $post, $variables['content'], $variables);

  // Gather classes.
  $variables['classes_array'][] = drupal_html_class('election-post-' . $election->type);

  // Clean up name so there are no underscores.
  $variables['theme_hook_suggestions'][] = 'election_post__' . $election->type;
  $variables['theme_hook_suggestions'][] = 'election_post__' . $election->election_id;

}

/**
 * Internal function to format the status field of an election post for display.
 * Election posts can either inherit the election's status, or they can be
 * closed. This applies to both voting and nominations.
 *
 * @todo make this themeable
 *
 * @param stdClass $election
 * @param stdClass $post
 * @param string $type
 *   The type of status ('v' for voting, 'n' for nominations).
 *
 * @return string
 */
function _election_post_format_status(stdClass $election, stdClass $post, $status_prefix = 'v') {
  $status = $post->{$status_prefix . 'status'};
  if ($status == ELECTION_POST_STATUS_INHERIT) {
    return t('!status (inherited)', array('!status' => _election_format_status($election, $status_prefix)));
  }
  $is_open = FALSE; // only two options for now are inherited or closed.
  $open_status = t('<span class="election-post-status-open">Open</span>');
  $closed_status = t('<span class="election-post-status-closed">Closed</span>');
  $status_formatted = $is_open? $open_status : $closed_status;
  return t('!status_formatted (overridden)', array('!status_formatted' => $status_formatted));
}

/**
 * Menu callback for an election post, path: election-post/%election_post.
 *
 * @param stdClass $election
 * @param stdClass $post
 * @param string $view_mode
 *
 * @return array
 *   Render array.
 */
function election_post_page_view($post, $view_mode = 'full') {

  $election = election_load($post->election_id);

  if ($view_mode == 'full') {
    drupal_set_breadcrumb(
      _election_build_breadcrumb(
        $election
      )
    );
  }

  return election_post_view($election, $post, $view_mode);

}

/*
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to a post entity
 * via a file field.
 *
 * @param string $field
 * @param string $entity_type
 * @param stdClass $entity
 */
function election_post_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election_post' && !empty($entity->election_id)) {
    $election = election_load($entity->election_id);
    return election_access('view', $election);
  }
}

/**
 * Implements hook_views_api().
 */
function election_post_views_api() {
  return array(
    'api' => 3,
  );
}

/*
 * Implements hook_views_default_views().
 */
function election_post_views_default_views() {
  $views_dir = drupal_get_path('module', 'election_post') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}

/**
 * Update the URL aliases for an individual election post.
 *
 * @param $post
 *   An election post object.
 * @param $op
 *   Operation being performed on the post ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_post_update_alias(stdClass $post, $op, array $options = array()) {
  // Skip processing if the post has no pattern.
  if (!pathauto_pattern_load_by_entity('election_post', $post->type)) {
    return;
  }
  $election = election_load($post->election_id);
  if (!$election) {
    watchdog('election_post', 'Could not update post alias: election ID @id could not be loaded', array('@id' => $post->election_id), WATCHDOG_WARNING);
    return;
  }
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election_post',
    $op,
    election_post_uri_path($post),
    array('election_post' => $post, 'election' => $election),
    $post->type
  );
}

/**
 * Update the URL aliases for multiple election posts.
 *
 * @param $post_ids
 *   An array of election post IDs.
 * @param $op
 *   Operation being performed on the posts ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_post_update_alias_multiple(array $post_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $posts = election_post_load_multiple($post_ids);
  foreach ($posts as $post) {
    pathauto_election_post_update_alias($post, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($post_ids), 'Updated URL alias for 1 post.', 'Updated URL aliases for @count posts.'));
  }
}

/**
 * Find out whether the logged in user has previously voted for the $post.
 *
 * @param stdClass $post
 *
 * @return bool
 */
function election_vote_check_user_previously_voted($post) {
  global $user;

  if ($user->uid == 0) {
    // This is an anonymous user. Try checking on session hash.
    $result = db_query_range('SELECT vote_id FROM {election_vote} WHERE (sid_hash = :sh OR (ip = :ip AND agent = :agent)) AND post_id = :pid', 0, 1, array(
      ':sh' => _election_vote_session_hash(),
      ':ip' => ip_address(),
      ':agent' => $_SERVER['HTTP_USER_AGENT'],
      ':pid' => $post->post_id,
    ))->fetchCol();
    return (!empty($result));
  }

  // This is an authenticated user: it's safe to check based on the $user->uid.
  $vote_count = db_query('SELECT COUNT(vote_id) FROM {election_vote} WHERE uid = :uid AND post_id = :pid', array(':uid' => $user->uid, ':pid' => $post->post_id))->fetchField(0);

  if ($vote_count > 1) {
    watchdog('election', 'User @uid has cast more than one vote for post @pid!', array('@uid' => $user->uid, '@pid' => $post->post_id), WATCHDOG_WARNING);
  }

  return ($vote_count > 0);

}

/**
 * Get a hash of the session ID.
 *
 * @return string
 */
function _election_vote_session_hash() {
  $sid = session_id();
  return md5($sid . 'TIMj1g4C6xyMi8L');
}

/**
 * Find the ordinal of a number.
 *
 * @return string
 */
function _election_vote_get_ordinal($num) {
  $ends = array('th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th');
  if ($num % 100 >= 11 && $num % 100 <= 13) {
    $ord = $num. 'th';
  }
  else {
    $ord = $num. $ends[$num % 10];
  }
  return $ord;
}

/**
 * Implements template_preprocess_election().
 */
function election_post_preprocess_election(&$vars) {
  $election = $vars['election'];
  $posts_name = _election_get_posts_name($election->type, TRUE);
  $vars['content']['posts'] = array(
    '#markup' => '<div class="election-post-candidates"><h2>' . drupal_ucfirst(check_plain($posts_name)) . '</h2>'
    . views_embed_view('election_posts', 'default', $election->election_id)
    . '</div>',
  );
}

/**
 * Check whether a post has approved candidates (e.g. to see whether voting is possible).
 */
function _election_post_has_approved_candidates($post) {
  if (!module_exists('election_candidate')) { // @todo sort this dependency
    return;
  }
  $num_candidates = db_query('SELECT COUNT(candidate_id) FROM {election_candidate} WHERE post_id = :pid AND cstatus = :approved', array(':pid' => $post->post_id, ':approved' => ELECTION_CANDIDATE_APPROVED))->fetchField(0);
  return ($num_candidates > 0);
}
