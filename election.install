<?php
/**
 * @file
 *   Install functions for the Election module.
 */

require_once 'includes/election.constants.inc';

/**
 * Implements hook_schema().
 */
function election_schema() {

  $schema = array();

  $schema['election'] = array(
    'description' => 'The main table for the election module.',
    'fields' => array(
      'election_id' => array(
        'description' => 'Primary key: identifier for an election.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the election (machine name).',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of the election - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'vstatus' => array(
        'description' => sprintf(
          'The voting status: open %d, closed %d, or scheduled %d.',
          ELECTION_STATUS_OPEN,
          ELECTION_STATUS_CLOSED,
          ELECTION_STATUS_SCHEDULED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_STATUS_CLOSED,
      ),
      'vopen_time' => array(
        'description' => 'The Unix timestamp for when voting opens (if scheduled).',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'vclose_time' => array(
        'description' => 'The Unix timestamp for when voting closes (if scheduled).',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'nstatus' => array(
        'description' => sprintf(
          'The nominations status: open %d, closed %d, or scheduled %d.',
          ELECTION_STATUS_OPEN,
          ELECTION_STATUS_CLOSED,
          ELECTION_STATUS_SCHEDULED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_STATUS_CLOSED,
      ),
      'nopen_time' => array(
        'description' => 'The Unix timestamp for when nominations open (if scheduled).',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'nclose_time' => array(
        'description' => 'The Unix timestamp for when nominations close (if scheduled).',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the election was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the election was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('election_id'),
    'indexes' => array(
      'type' => array('type'),
      'vstatus' => array('vstatus'),
      'nstatus' => array('nstatus'),
      'vperiod' => array('vopen_time', 'vclose_time'),
      'nperiod' => array('nopen_time', 'nclose_time'),
      'created' => array('created'),
      'title' => array('title'),
    ),
  );

  $schema['election_ballot'] = array(
    'description' => 'The ballots table for the election module.',
    'fields' => array(
      'ballot_id' => array(
        'description' => 'Primary key: identifier for a ballot.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vote_id' => array(
        'description' => 'Relates to {election_vote}.vote_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'post_id' => array(
        'description' => 'For referendums: the motion being answered. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'answer' => array(
        'description' => sprintf(
          'For referendums: the answer (no %d, yes %d, or abstain %d).',
          ELECTION_ANSWER_NO,
          ELECTION_ANSWER_YES,
          ELECTION_ANSWER_ABSTAIN
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'candidate_id' => array(
        'description' => 'For STV elections: the candidate being ranked.'
                      . ' Relates to {election_candidate}.candidate_id.'
                      . ' Ignored if {election_ballot}.ron = 1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ron' => array(
        'description' => 'For STV elections: whether or not the candidate being ranked is RON (Re-Open Nominations).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'rank' => array(
        'description' => 'For STV elections: the rank of the candidate in the ballot.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('ballot_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'candidate_id' => array('candidate_id'),
      'rank' => array('rank'),
      'ron' => array('ron'),
    ),
    'foreign keys' => array(
      'vote' => array(
        'table' => 'election_vote',
        'columns' => array('vote_id' => 'vote_id'),
      ),
    ),
  );

  $schema['election_vote'] = array(
    'description' => 'The votes table for the election module. This'
                  . ' records the act of voting, but not the voting'
                  . ' preferences (see the {election_ballot} table).',
    'fields' => array(
      'vote_id' => array(
        'description' => 'Primary key: identifier for a vote.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'post_id' => array(
        'description' => 'The post for which the vote has been made. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the voter.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ip' => array(
        'description' => 'The IP address of the voter (v4 or v6).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'agent' => array(
        'description' => 'The HTTP User Agent of the voter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sid_hash' => array(
        'description' => 'An MD5 hash of the voter\'s session ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'vote_time' => array(
        'description' => 'A UNIX timestamp for when the vote was cast.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vote_id'),
    'indexes' => array(
      'post_id' => array('post_id'),
      'uid' => array('uid'),
      'agent' => array('agent'),
      'vote_time' => array('vote_time'),
    ),
    'foreign keys' => array(
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;

}

/**
 * Implements hook_install().
 */
function election_install() {

  _election_add_fields();

  menu_rebuild();

}

/**
 * Implements hook_uninstall().
 */
function election_uninstall() {

  _election_remove_fields();

}

/**
 * Set up entity fields.
 */
function _election_add_fields() {
  foreach (_election_fields_info() as $field) {
    $field_name = $field['field_name'];
    $instances = array();
    if (isset($field['instances'])) {
      $instances = $field['instances'];
    }
    if (field_info_field($field_name) === NULL) {
      field_create_field($field);
      watchdog('election', 'Created field @field_name', array('@field_name' => $field_name));
    }
    foreach ($instances as $instance) {
      if (!isset($instance['field_name'])) {
        $instance['field_name'] = $field_name;
      }
      if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
        field_create_instance($instance);
        watchdog(
          'election',
          'Created instance of @field_name on @entity--@bundle',
          array(
            '@field_name' => $field_name,
            '@entity' => $instance['entity_type'],
            '@bundle' => $instance['bundle'],
          )
        );
      }
    }
  }
}

/**
 * Remove entity fields.
 */
function _election_remove_fields() {
  foreach (_election_fields_info() as $field) {
    field_delete_field($field['field_name']);
  }
}

/**
 * Define field and instances that this module needs. Data is extracted from
 * this for the functions field_create_field() and field_create_instance().
 *
 * @see _election_add_fields()
 *
 * @return array
 */
function _election_fields_info() {
  $fields = array(); // empty for now, left in for convenience
  return $fields;
}
