<?php
/**
 * @file
 * Election primary module file.
 */

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'uri callback' => 'election_uri',
    'controller class' => 'ElectionController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'name',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_types() as $type_mn => $type) {
    $entities['election']['bundles'][$type_mn] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/election/types/' . $type_mn,
        'bundle argument' => 3,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_post_types() as $type_mn => $type) {
    $entities['election_post']['bundles'][$type_mn] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/election/post/' . $type_mn,
        'bundle argument' => 3,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  return $entities;

}

/**
 * Return information about election types in a structured array of stdClass
 * objects, keyed by each type's machine name.
 *
 * @return array
 */
function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types['ers97'] = (object) array(
      'name' => t('STV (ERS97) Election'),
      'description' => t('A Single Transferable Vote election conforming to the Electoral Reform Society\'s ERS97 standard.'),
    );
    $types['referendum'] = (object) array(
      'name' => t('Referendum'),
      'description' => t('A simple referendum, where people can vote once (yes, no, or abstain) in response to a motion.'),
    );
  }
  return $types;
}

/**
 * Return information about election post types in a structured array of stdClass
 * objects, keyed by each post type's machine name.
 *
 * @return array
 */
function election_post_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types['motion'] = (object) array(
      'name' => t('Referendum motion'),
    );
    $types['position'] = (object) array(
      'name' => t('Electoral position'),
    );
  }
  return $types;
}

/**
 * Implements hook_field_extra_fields().
 */
function election_field_extra_fields() {
  $extra = array();
  foreach (election_types() as $type_mn => $type) {
    $extra['election'][$type_mn] = array(
      'form' => array(
        'name' => array(
          'label' => t('Name'),
          'description' => t('The name of the election.'),
          'weight' => -10,
        ),
        'description' => array(
          'label' => t('Description'),
          'description' => t('A short description of the election.'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'name' => array(
          'label' => t('Name'),
          'weight' => -10,
        ),
        'description' => array(
          'label' => t('Description'),
          'weight' => 0,
        ),
      ),
    );
  }

  $extra['election_post']['position'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Position title'),
        'description' => t('The title of the position.'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('A short description of the position.'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => 0,
      ),
    ),
  );

  $extra['election_post']['motion'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Motion title'),
        'description' => t('The title of the motion.'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('A short description of the motion.'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Load an election type by its path.
 *
 * @param string $type_mn
 * The machine name of the type.
 * @return mixed
 * A stdClass election type object, or FALSE on failure.
 */
function election_type_load($type_mn) {
  $types = election_types();
  return isset($types[$type_mn]) ? $types[$type_mn] : FALSE;
}

/**
 * Load an election post type by its path.
 *
 * @param string $type_mn
 * The machine name of the type.
 * @return mixed
 * A stdClass election type object, or FALSE on failure.
 */
function election_post_type_load($type_mn) {
  $types = election_post_types();
  return isset($types[$type_mn]) ? $types[$type_mn] : FALSE;
}

/**
 * URI callback for a single election.
 *
 * @return array
 */
function election_uri($election) {
  return array(
    'path' => 'election/' . $election->election_id,
  );
}

/**
 * URI callback for a single election post.
 *
 * @return array
 */
function election_post_uri($post) {
  return array(
    'path' => 'election/post/' . $post->post_id,
  );
}

/*
 * Return the path part of the election URI callback as a string.
 *
 * @return string
 */
function election_uri_path($election) {
  $uri = election_uri($election);
  return $uri['path'];
}

/**
 * Load individual or multiple elections by their IDs.
 *
 * @todo Implement revisioning.
 * @see entity_load()
 *
 * @param mixed $election_id
 *   A single election ID or an array of multiple IDs.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load($election_ids = NULL) {
  $ids = (array) $election_ids;
  $election = entity_load('election', $ids, array(), FALSE);
  return $election ? reset($election) : FALSE;
}

/**
 * Implements hook_permission().
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Create, edit and delete all elections.'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally an election or an election type to check access for. If nothing is
 *   given, access for all elections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  if (user_access('administer elections', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function election_menu() {

  $items = array();

  $items['admin/election'] = array(
    'title' => 'Elections',
    'description' => 'Administer elections and referendums.',
    'page callback' => 'election_page',
    'file' => 'election.pages.inc',
    'access arguments' => array('administer elections'),
    'weight' => 1,
  );

/*
  $items['admin/election/add'] = array(
    'title' => 'Add new election',
    'description' => 'Add a new election or referendum, choosing between defined types.',
    'page callback' => 'election_page',
    'access arguments' => array('administer elections'),
    'weight' => -10,
    'menu_name' => 'management',
    'file' => 'election.pages.inc',
  );
*/

  foreach (election_types() as $type_mn => $type) {
    $items['admin/election/types/' . $type_mn] = array(
      'title' => $type->name . ' fields',
      'title callback' => 'check_plain',
      'page callback' => 'election_page_type',
      'page arguments' => array(3),
      'access arguments' => array('administer elections'),
      'file' => 'election.pages.inc',
      'description' => 'Manage fields and display settings for the election type "' . $type->name . '".',
    );
    $items['admin/election/types/' . $type_mn . '/settings'] = array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/election/add/' . $type_mn] = array(
      'title' => 'Add new ' . $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'election_page_add',
      'page arguments' => array(3),
      'access arguments' => array('administer elections'),
      'file' => 'election.pages.inc',
      'description' => $type->description,
    );
  }

  foreach (election_post_types() as $type_mn => $type) {
    $items['admin/election/post/' . $type_mn] = array(
      'title' => $type->name . ' fields',
      'title callback' => 'check_plain',
      'page callback' => 'election_page',
      'access arguments' => array('administer elections'),
      'file' => 'election.pages.inc',
      'description' => 'Manage fields and display settings for the post type "' . $type->name . '".',
      'weight' => 10,
    );
    $items['admin/election/post/' . $type_mn . '/settings'] = array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }

  $items['election/%election'] = array(
    'title callback' => 'election_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view elections'),
    'file' => 'election.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['election/%election/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_page_edit',
    'file' => 'election.pages.inc',
    'page arguments' => array(1),
    'access arguments' => array('update elections'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_delete_confirm', 1),
    'access arguments' => array('delete elections'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;

}

function election_forms() {

  $forms = array();
  if ($types = election_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_election_form']['callback'] = 'election_form';
    }
  }
  return $forms;

}

function election_form($form, &$form_state, $election) {

  $form['#id'] = 'election-form';
  $form['#election'] = $election;

  $form_state['election'] = $election;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $election->name,
    '#weight' => -5,
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $election->description,
    '#weight' => -4,
    '#required' => FALSE,
  );

  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('election_form_submit'),
  );

  if (!empty($election->election_id)) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 15,
      '#submit' => array('election_form_delete_submit'),
      '#access' => user_access('delete elections'),
    );
  }

  $form['#validate'][] = 'election_form_validate';

  // Add custom fields from the Field system.
  field_attach_form('election', $election, $form, $form_state);

  return $form;

}

function election_form_validate($form, &$form_state) {
  $election = $form_state['election']; // @TODO check if this should be passed by reference
  field_attach_form_validate('election', $election, $form, $form_state);
}

function election_form_submit($form, &$form_state) {
  global $user;
  $election = &$form_state['election'];

  if (empty($election->uid)) {
    $election->uid = $user->uid;
  }

  $election->name = $form_state['values']['name'];
  $election->description = $form_state['values']['description'];

  field_attach_submit('election', $election, $form, $form_state);

  // Save the election.
  election_save($election);

  // Notify the user that the election was saved.
  $types = election_types();
  $type = $types[$election->type];
  drupal_set_message(
    t('The @type "@name" was saved.', array('@type' => $type->name, '@name' => $election->name))
  );

  $form_state['redirect'] = 'election/' . $election->election_id;
}

function election_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $election = $form['#election'];
  $form_state['redirect'] = array(
    election_uri_path($election) . '/delete',
    array('query' => $destination),
  );
}

function election_delete_confirm($form, &$form_state, $election) {
  $form['#election'] = $election;
  $form['election_id'] = array(
    '#type' => 'value',
    '#value' => $election->election_id,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to delete %name?', array('%name' => $election->name)),
    election_uri_path($election),
    t('This action cannot be undone'),
    t('Delete'),
    t('Cancel')
  );
}

function election_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $election = election_load($form_state['values']['election_id']);
    election_delete($form_state['values']['election_id']);
    watchdog('election', '@type: deleted %name', array('@type' => $election->type, '%name' => $election->name));
    $types = election_types();
    drupal_set_message(
      t(
        '@type %name has been deleted.',
        array(
          '@type' => $types[$election->type]->name,
          '%name' => $election->name
        )
      )
    );
  }
  $form_state['redirect'] = '<front>';
}

function election_delete_multiple(array $election_ids) {
  return entity_get_controller('election')->delete($election_ids);
}

function election_delete($election_id) {
  return election_delete_multiple(array($election_id));
}

function election_save($election) {
  return entity_get_controller('election')->save($election);
}

function election_page_edit($election) {
  $types = election_types();
  drupal_set_title(
    t(
      'Edit @type: <em>@name</em>',
      array(
        '@type' => $types[$election->type]->name,
        '@name' => $election->name,
      )
    ),
    PASS_THROUGH
  );
  return drupal_get_form($election->type . '_election_form', $election);
}