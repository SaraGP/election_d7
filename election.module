<?php
/**
 * @file
 * Election primary module file.
 */

// Required files.
require_once 'includes/election.constants.inc';

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'access callback' => 'election_access',
    'uri callback' => 'election_uri',
    'controller class' => 'ElectionController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_types() as $type_mn => $type) {
    $entities['election']['bundles'][$type_mn] = array(
      'label' => drupal_ucfirst($type['name']),
      'admin' => array(
        'path' => 'admin/election/' . $type_mn,
        'real path' => 'admin/election/' . $type_mn,
        'bundle argument' => 2,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  return $entities;

}

/**
 * Return information about election types in a structured array, keyed by
 * each type's machine name. Each element is also a structured array defining at
 * least 'name' and 'post key'.
 *
 * This uses hook_election_type_info() to allow other modules to define types.
 *
 * @return array
 */
function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types = array();
    $types['referendum'] = array(
      'name' => t('referendum'),
      'description' => t('A simple referendum, where people can vote once (yes, no, or abstain) in response to a motion.'),
      'post name' => t('motion'),
      'post name plural' => t('motions'),
      'post key' => 'motion',
      'weight' => 0,
    );
    $types['stv'] = array(
      'name' => t('STV election'),
      'description' => t('A Single Transferable Vote election, conforming to the Electoral Reform Society\'s ERS97 standard.'),
      'post name' => t('position'),
      'post name plural' => t('positions'),
      'post key' => 'position',
      'weight' => 1,
    );
    $types += module_invoke_all('election_type_info');
  }
  return $types;
}

/*
 * Return an array of election type names, keyed by machine name.
 *
 * @param bool $ucfirst
 *   Whether to apply drupal_ucfirst() to each election type name.
 *
 * @return array
 */
function election_type_get_names($ucfirst = TRUE) {
  $names = array();
  $types = election_types();
  foreach ($types as $mn => $type) {
    $names[$mn] = $ucfirst? drupal_ucfirst($type['name']) : $type['name'];
  }
  return $names;
}

/**
 * Implements entity_uri(). URI callback for a single election. See:
 * http://api.drupal.org/api/drupal/includes--common.inc/function/entity_uri/7.
 *
 * @return array
 */
function election_uri($election) {
  $path = 'election/' . $election->election_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/*
 * Return the path part of the election URI callback as a string.
 *
 * The implementation of this function throughout the module is debatable, see:
 * http://drupal.org/node/823428.
 *
 * @see election_uri()
 *
 * @return string
 */
function election_uri_path($election) {
  $uri = election_uri($election);
  return $uri['path'];
}

/**
 * Load an individual election.
 *
 * @param mixed $election_id
 *   A single election ID.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load($election_id = NULL) {
  $result = entity_load('election', (array) $election_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple elections.
 *
 * @param mixed $election_id
 *   An array of election IDs.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load_multiple(array $election_ids = array()) {
  return entity_load('election', $election_ids);
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Alter the fields and display settings for election types.'),
    ),
    'vote in elections' => array(
      'title' => t('Vote in elections'),
      'description' => t('Users must have this permission in order to vote.'),
    ),
    'create elections' => array(
      'title' => t('Create elections'),
    ),
    'delete own elections' => array(
      'title' => t('Delete own elections'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes ALL associated data, for example votes.'),
      'restrict access' => TRUE,
    ),
    'delete any election' => array(
      'title' => t('Delete any election'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes ALL associated data, for example votes.'),
      'restrict access' => TRUE,
    ),
    'edit own elections' => array(
      'title' => t('Edit own elections'),
      'description' => t('This permission allows the user not only to edit elections, but also to administer the posts and candidates for those elections.'),
    ),
    'edit any election' => array(
      'title' => t('Edit any election'),
      'description' => t('This permission allows the user not only to edit elections, but also to administer the posts and candidates for those elections.'),
    ),
    'view any election' => array(
      'title' => t('View any election'),
      'description' => t('This permission allows the user to view elections, including those elections\' posts and approved candidates.'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally an election or an election type to check access for. If nothing is
 *   given, access for all elections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  $own = ($election && $account && $election->uid == $account->uid);
  switch ($op) {
    case 'view':
      if ($own) {
        return TRUE;
      }
      return user_access('view any election', $account);
      break;
    case 'create':
      return user_access('create elections', $account);
      break;
    case 'update':
    case 'edit':
      if ($own && user_access('edit own elections', $account)) {
        return TRUE;
      }
      return user_access('edit any election', $account);
      break;
    case 'vote':
      if ($election && !_election_is_open($election->vstatus, $election->vopen_time, $election->vclose_time)) {
        return FALSE;
      }
      return user_access('vote in elections', $account);
      break;
    case 'delete':
      if ($own && user_access('delete own elections', $account)) {
        return TRUE;
      }
      return user_access('delete any election', $account);
      break;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function election_menu() {

  $items = array();

  $items['admin/election'] = array(
    'title' => 'Elections',
    'description' => 'Administer elections and referendums.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
    'weight' => 1,
  );

  $items['admin/election/list'] = array(
    'title' => 'Election list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_list_form'),
    'access arguments' => array('administer elections'),
    'file' => 'election.admin.inc',
    'description' => 'View, edit, and add new elections.',
    'weight' => -10,
  );

  foreach (election_types() as $type_mn => $type) {
    $items['admin/election/list/add/' . $type_mn] = array(
      'title' => 'Add new ' . $type['name'],
      'title callback' => 'check_plain',
      'page callback' => 'election_page_add',
      'page arguments' => array(4),
      'access arguments' => array('administer elections'),
      'file' => 'election.admin.inc',
      'description' => empty($type['description'])? '' : $type['description'],
      'type' => MENU_LOCAL_ACTION,
      'weight' => isset($type['weight'])? $type['weight'] : 0,
    );
    $items['admin/election/' . $type_mn] = array(
      'title' => drupal_ucfirst($type['name']) . ' settings',
      'title callback' => 'check_plain',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => empty($type['description'])? '' : $type['description'],
      'weight' => isset($type['weight'])? $type['weight'] : 0,
    );
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name = _election_get_posts_name($type_mn);
      $post_name_plural = _election_get_posts_name($type_mn, TRUE);
      $items['admin/election/' . $type_mn . '/' . $post_key] = array(
        'title' => drupal_ucfirst($post_name) . ' settings',
        'title callback' => 'check_plain',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer elections'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'description' => 'Manage fields and display settings for ' . $post_name_plural . '.',
      );
    }
  }

  $items['election/%election'] = array(
    'title callback' => 'election_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('view', 1),
    'file' => 'election.pages.inc',
  );

  $items['election/%election/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_page_edit',
    'file' => 'election.admin.inc',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_form_delete_confirm', 1),
    'access callback' => 'election_access',
    'access arguments' => array('delete', 1),
    'file' => 'election.admin.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_menu_alter(&$items) {
  foreach (election_types() as $type_mn => $type) {
    $path = 'admin/election/' . $type_mn;
    unset($items[$path . '/settings']);
    $items[$path . '/fields']['weight'] = -2;
    $items[$path . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/fields']['description'] = t(
      'Manage fields for the election type %type.',
      array('%type' => $type['name'])
    );
    $items[$path . '/display']['weight'] = -1;
    $items[$path . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display/full']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display/teaser']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display']['description'] = t(
      'Manage display for the election type %type.',
      array('%type' => $type['name'])
    );
  }
}

/*
 * Implements hook_field_extra_fields().
 *
 * @return array
 */
function election_field_extra_fields() {
  $extra = array();
  $extra['election']['referendum'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('The referendum title.'),
        'weight' => 0,
      ),
      'vstatus' => array(
        'label' => t('Voting status'),
        'weight' => 1,
      ),
      'vschedule' => array(
        'label' => t('Voting schedule'),
        'weight' => 2,
      ),
    ),
  );
  $extra['election']['stv'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('The election title.'),
        'weight' => 0,
      ),
      'nstatus' => array(
        'label' => t('Nominations status'),
        'weight' => 1,
      ),
      'nschedule' => array(
        'label' => t('Nominations schedule'),
        'weight' => 2,
      ),
      'vstatus' => array(
        'label' => t('Voting status'),
        'weight' => 3,
      ),
      'vschedule' => array(
        'label' => t('Voting schedule'),
        'weight' => 4,
      ),
    ),
  );
  return $extra;
}

/**
 * Wrapper function to allow deleting multiple elections.
 *
 * @param array $election_ids
 *   Array of election IDs.
 * @return bool
 */
function election_delete_multiple(array $election_ids) {
  return entity_get_controller('election')->delete($election_ids);
}

/**
 * Wrapper function to allow deleting an individual election.
 *
 * @see election_delete_multiple()
 *
 * @param mixed $election_id
 *   Single election ID.
 * @return bool
 */
function election_delete($election_id) {
  return election_delete_multiple(array($election_id));
}

/**
 * Wrapper function to allow saving an election.
 *
 * @param stdClass $election
 *   Election object.
 * @return bool
 */
function election_save($election) {
  return entity_get_controller('election')->save($election);
}

/**
 * Implements hook_entity_update().
 */
function election_entity_update($entity, $type) {
  switch ($type) {
    case 'election':
      if (module_exists('pathauto')) {
        pathauto_election_update_alias($entity, 'update');
      }
    break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function election_entity_delete($entity, $type) {
  switch ($type) {
    case 'election':
      // Delete Pathauto path aliases when an election is deleted.
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election', $entity);
      }
    break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function election_entity_insert($entity, $type) {
  if ($type == 'election') {
    if (module_exists('pathauto')) {
      pathauto_election_update_alias($entity, 'insert');
    }
  }
}

/**
 * Title callback for election/%election/view (output should not be escaped here
 * as it is done later).
 *
 * @param stdClass $election
 *
 * @return string
 */
function election_page_title($election) {
  return $election->title;
}

/**
 * Implements hook_theme().
 */
function election_theme() {
  return array(
    'election' => array(
      'render element' => 'elements',
      'template' => 'election',
    ),
  );
}

/**
 * Generate an array for rendering the given election.
 *
 * @param $election
 *   An election object.
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 *
 * @return
 *   An array as expected by drupal_render().
 */
function election_view($election, $view_mode = 'full') {

  // Remove previously built content, if it exists.
  $election->content = array();

  if ($view_mode == 'teaser') {
    $election->content['title'] = array(
      '#markup' => filter_xss($election->title),
      '#weight' => -5,
    );
  }
  else {
    drupal_set_title($election->title);
  }

  // Build fields content.
  // In case of a multiple view, node_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('election', array($election->election_id => $election), $view_mode);
  entity_prepare_view('election', array($election->election_id => $election));
  $election->content += field_attach_view('election', $election, $view_mode);

  $build = $election->content;
  // We don't need duplicate rendering info in election->content.
  unset($election->content);

  $build += array(
    '#theme' => 'election',
    '#election' => $election,
    '#view_mode' => $view_mode,
  );

  // Add contextual links for this election, except when the election is already being
  // displayed on its own page. Modules may alter this behavior (for example,
  // to restrict contextual links to certain view modes) by implementing
  // hook_election_view_alter().
  if (!empty($election->election_id) && $view_mode != 'full') {
    $build['#contextual_links']['election'] = array('election', array($election->election_id));
  }

  // Allow modules to modify the structured election.
  $type = 'election'; // $type is passed by reference to drupal_alter() so it must be a variable.
  drupal_alter(array('election_view', 'entity_view'), $build, $type);

  return $build;

}

/**
 * Process variables for election.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $election
 * - $view_mode
 * - $page
 *
 * @see election.tpl.php
 */
function template_preprocess_election(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['election'] = $variables['elements']['#election'];
  $election = $variables['election'];

  $uri = election_uri($election);
  $variables['election_url'] = url($uri['path'], $uri['options']);
  $variables['title']     = check_plain($election->title);
  $variables['page']      = $variables['view_mode'] == 'full';

  $variables['vstatus'] = _election_format_status($election, 'v');
  $variables['nstatus'] = _election_format_status($election, 'n');

  // Flatten the election object's member fields.
  $variables = array_merge((array) $election, $variables);

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('election', $election, $variables['content'], $variables);

  $variables['classes_array'][] = drupal_html_class('election-type-' . $election->type);

  $variables['theme_hook_suggestions'][] = 'election__' . $election->type;
  $variables['theme_hook_suggestions'][] = 'election__' . $election->election_id;

}

/**
 * Internal function that determines whether voting/nominating in an election is 'open',
 * based on the status, opening time and closing time.
 *
 * @param int $status
 *   The vstatus/nstatus of the election (see election.install).
 * @param int $open_time
 *   The UNIX timestamp for the election's voting opening time.
 * @param int $close_time
 *   The UNIX timestamp for the election's voting closing time.
 *
 * @return bool
 */
function _election_is_open($status, $open_time, $close_time) {
  if ($status == ELECTION_STATUS_OPEN) {
    return TRUE;
  }
  if ($status == ELECTION_STATUS_CLOSED) {
    return FALSE;
  }
  return (
    $open_time && REQUEST_TIME >= $open_time
    && (!$close_time || REQUEST_TIME < $close_time)
  );
}

/**
 * Internal function to format the voting/nominating status (vstatus/nstatus)
 * field of an election for display.
 *
 * @todo make this themeable
 *
 * @param stdClass $election
 * @param string $status_prefix
 *   The type of status ('v' for voting, 'n' for nominations).
 *
 * @return string
 */
function _election_format_status(stdClass $election, $status_prefix = 'v') {
  // Nominations aren't relevant to referendums.
  // @todo make this extensible
  if (@$election->type == 'referendum' && $status_prefix == 'n') {
    return t('N/A');
  }
  $status = $election->{$status_prefix . 'status'};
  $open_time = @$election->{$status_prefix . 'open_time'};
  $close_time = @$election->{$status_prefix . 'close_time'};
  $open_status = t('<span class="election-status-open">Open</span>');
  $closed_status = t('<span class="election-status-closed">Closed</span>');
  if ($status == ELECTION_STATUS_SCHEDULED) {
    $scheduled_future = t('Scheduled for the future');
    $scheduled_past = t('Scheduled for the past');
    $scheduled_now = t('Scheduled (now open)');
    if (REQUEST_TIME < $open_time) {
      return $scheduled_future;
    }
    elseif (REQUEST_TIME < $close_time) {
      return $scheduled_now;
    }
    else {
      return $scheduled_past;
    }
  }
  $is_open = _election_is_open($status, $open_time, $close_time);
  return $is_open? $open_status : $closed_status;
}

/**
 * General function for creating breadcrumbs. Accepts any number of parameters,
 * each corresponding to the breadcrumb link. Output must be sanitized before
 * passing to this function. The string '_POST_' will be replaced by the
 * election's post type name.
 *
 * @param stdClass $election
 * @param string $part
 *
 * @return array
 *   An array of breadcrumb parts that can be provided to drupal_set_breadcrumb().
 */
function _election_build_breadcrumb(stdClass $election = NULL) {
  $args = func_get_args();
  $links = array();
  $links[] = l(
    t('Home'),
    '<front>'
  );
  $links[] = l(
    t('Elections'),
    'elections'
  );
  if (!is_object($election)) {
    return $links;
  }
  $election_uri_path = election_uri_path($election);
  unset($args[0]);
  $args_count = count($args);
  $links[] = l(
    $election->title, // l() runs check_plain anyway.
    $election_uri_path
  );
  foreach ($args as $key => $arg) {
    switch ($arg) {
      case '_POSTS_':
        $posts_name = _election_get_posts_name($election->type, TRUE);
        $link = l(drupal_ucfirst($posts_name), $election_uri_path . '/posts');
        break;
      case '_CANDIDATES_':
        $link = l(t('Candidates'), $election_uri_path . '/candidates');
        break;
      default:
        $link = $arg;
        break;
    }
    $links[] = $link;
  }
  return $links;
}

/**
 * Internal function: load election type information by its machine name.
 *
 * @param string $type_mn
 *   The machine name of the type.
 * @return mixed
 *   A stdClass election type object, or FALSE on failure.
 */
function _election_type_get_info($type_mn) {
  $type = array(
    'name' => t('Unknown type'),
    'post key' => 'post',
    'post name' => t('post'),
    'post name plural' => t('posts'),
  );
  $types = election_types();
  if (isset($types[$type_mn])) {
    $type = $types[$type_mn];
  }
  return $type;
}

/**
 * Get the post name (i.e. 'motion' or 'position') for an election type.
 *
 * @param string $type_mn
 * @param bool $plural
 *
 * @return string
 */
function _election_get_posts_name($type_mn, $plural = FALSE) {
  $name = 'post';
  $type = _election_type_get_info($type_mn);
  if (!$type) {
    return $name;
  }
  if (!empty($type['post name'])) {
    $name = $type['post name'];
  }
  if ($plural && !empty($type['post name plural'])) {
    $name = $type['post name plural'];
  }
  return $name;
}

/*
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to an election
 * entity via a file field.
 *
 * @param string $field
 * @param string $entity_type
 * @param stdClass $entity
 */
function election_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election') {
    return election_access('view', $entity);
  }
}

/**
 * Implements hook_views_api().
 */
function election_views_api() {
  return array(
    'api' => 3,
  );
}

/*
 * Implements hook_views_default_views().
 */
function election_views_default_views() {
  $views_dir = drupal_get_path('module', 'election') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}

/**
 * Implements hook_menu_position_rule_plugins().
 */
function election_menu_position_rule_plugins() {
  return array(
    'election' => array(
      'form_callback' => 'election_menu_position_rule_election_form',
      'condition_callback' => 'election_menu_position_condition_election',
      'file' => 'includes/election.menu-position.inc',
    ),
  );
}

/**
 * Update the URL aliases for an individual election.
 *
 * @param $election
 *   A election object.
 * @param $op
 *   Operation being performed on the election ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_update_alias(stdClass $election, $op, array $options = array()) {
  // Skip processing if the election has no pattern.
  if (!pathauto_pattern_load_by_entity('election', $election->type)) {
    return;
  }
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election',
    $op,
    election_uri_path($election),
    array('election' => $election),
    $election->type
  );
}

/**
 * Update the URL aliases for multiple elections.
 *
 * @param $election_ids
 *   An array of election IDs.
 * @param $op
 *   Operation being performed on the elections ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_update_alias_multiple(array $election_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $elections = election_load_multiple($election_ids);
  foreach ($elections as $election) {
    pathauto_election_update_alias($election, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($election_ids), 'Updated URL alias for 1 election.', 'Updated URL aliases for @count elections.'));
  }
}
