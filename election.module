<?php
/**
 * @file
 * Election primary module file.
 */

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'uri callback' => 'election_uri',
    'controller class' => 'EntityAPIController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'name',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );
  
  foreach (election_types() as $type => $info) {
    $entities['election']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/elections/manage/%election_type',
        'real path' => 'admin/structure/elections/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  return $entities;

}


function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types['ers97'] = (object) array(
      'type' => 'ers97',
      'name' => t('STV (ERS97) Election'),
      'description' => t('A Single Transferable Vote election conforming to the Electoral Reform Society\'s ERS97 standard.'),
    );
    $types['referendum'] = (object) array(
      'type' => 'referendum',
      'name' => t('Referendum'),
      'description' => t('A simple referendum, where people can vote once (yes, no, or abstain) in response to a motion.'),
    );
  }
  return $types;
}

function election_type_load($type) {
  $type = str_replace('-', '_', $type);
  $types = election_types();
  return isset($types[$type]) ? $types[$type] : FALSE;
}

function election_uri($election) {
  return array(
    'path' => 'election/' . $election->election_id,
  );
}

function election_load($election_id = NULL, $vid = NULL, $reset = FALSE) {
  $ids = (isset($election_id) ? array($election_id) : array());
  $election = election_load_multiple($ids, $reset);
  return $election ? reset($election) : FALSE;
}

function election_load_multiple(array $election_ids = array(), $reset = FALSE) {
  return entity_load('election', $election_ids, array(), $reset);
}

/**
 * Implements hook_permission().
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Create, edit and delete all elections.'),
    ),
  );
  return $permissions;  
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally an election or an election type to check access for. If nothing is
 *   given, access for all elections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  if (user_access('administer elections', $account)) {
    return TRUE;
  }
  return FALSE;
}


function election_menu() {
  
  $items = array();
  
  $items['admin/structure/elections'] = array(
    'title' => 'Manage elections',
    'description' => 'Manage elections and referendums',
    'page callback' => 'election_overview_types',
    'access arguments' => array('administer elections'),
  );
  
  $items['admin/structure/elections/manage/%election_type'] = array(
    'title' => 'View election type',
    'title callback' => 'election_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'election_information',
    'page arguments' => array(4),
    'access arguments' => array('administer elections'),
  );
  
  $items['admin/structure/elections/manage/%election_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['election/add'] = array(
    'title' => 'Add new election',
    'page callback' => 'election_add_page',
    'access arguments' => array('create elections'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'election.pages.inc',
  );
  
  foreach (election_types() as $type) {
    $items['election/add/' . str_replace('_', '-', $type->type)] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'election_add',
      'page arguments' => array(2),
      'access arguments' => array('create elections'),
      'description' => $type->description,
    );
  }
  
  return $items;
  
}

function election_overview_types() {
  $items = array();
  foreach (election_types() as $type => $info) {
    $items[] = l(
      t('View @type', array('@type' => $info->name)),
      'admin/structure/elections/manage/' . str_replace('_', '-', $type)
    );
  }
  return theme('item_list', array('items' => $items));
}

function election_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

function election_information($type) {
  return $type->name . ': ' . $type->description;
}

function election_add_page() {
  
  $item = menu_get_item();
  $links = system_admin_menu_block($item);
  
  foreach ($links as $link) {
    
    $items[] = l($link['title'], $link['href'], $item['localized_options'])
             . ': ' . filter_xss_admin($link['description']);
    
  }
  
  return theme('item_list', array('items' => $items));
  
}

function election_add($type) {
  
  global $user;
  
  $type = str_replace('-', '_', $type);
  
  $types = election_types();
  if (empty($types[$type)) {
    return MENU_NOT_FOUND;
  }
  
  $election = entity_get_controller('election')->create($type);
  
  drupal_set_title(
    t('Create @name', array('@name' => $types[$type]->name)),
    PASS_THROUGH
  );
  
  return drupal_get_form($type . '_election_form', $election);
  
}

function election_save($election) {
  return entity_get_controller('election')->save($election);
}

function election_forms() {
  
  $forms = array();
  if ($types = election_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_election_form']['callback'] = 'election_form';
    }
  }
  return $forms;
  
}

function election_form($form, &$form_state, $election) {
  
  $form['#id'] = 'election-form';
  $form['#election'] = $election;]
  
  $form_state['election'] = $election;
  
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $election->title,
    '#weight' => -5,
    '#required' => TRUE,
  );
  
  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('election_form_submit'),
  );
  
  if (!empty($election->election_id)) {    
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 15,
      '#delete' => array('election_form_delete_submit'),
      '#access' => user_access('delete elections'),
    );
  }
  
  $form['#validate'][] = 'election_form_validate';
  
  // Add custom fields from the Field system.
  field_attach_form('election', $election, $form, $form_state);
  
  return $form;
  
}

function election_form_validate($form, &$form_state) {
  $election = $form_state['election']; // @TODO check if this should be passed by reference
  field_attach_form_validate('election', $election, $form, $form_state);
}

function election_form_submit($form, &$form_state) {
  global $user;
  $election = &$form_state['election'];
  
  if (empty($election->uid)) {
    $election->uid = $user->uid;
  }
  
  $election->name = $form_state['values']['name'];
  
  field_attach_submit('election', $election, $form, $form_state);
  
  // Save the election.
  election_save($election);
  
  // Notify the user that the election was saved.
  drupal_set_message(
    t('The election "@name" was saved.', array('@name' => $election->name))
  );
  
  $form_state['redirect'] = 'election/' . $election->election_id;  
}