<?php
/**
 * @file
 * Election Post: primary module file.
 */

/**
 * Implements hook_menu().
 */
function election_post_menu() {

  $items = array();

  foreach (election_types() as $type_machine_name => $type) {
    $post_machine_name = $type['post machine name'];
    $post_name = election_get_post_name($type_machine_name);
    $post_name_plural = election_get_post_name($type_machine_name, TRUE);
    $items['admin/config/election/' . $type_machine_name . '/' . $post_machine_name] = array(
      'title' => '@post settings',
      'title arguments' => array('@post' => drupal_ucfirst($post_name)),
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => 'Manage fields and display settings for ' . $post_name_plural . '.',
    );
  }

  $items['election/%election/add-post'] = array(
    'title callback' => 'election_post_page_add_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_add',
    'page arguments' => array(1),
    'access callback' => 'election_post_access',
    'access arguments' => array('create', 1),
    'file' => 'election-post.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['election-post/%election_post'] = array(
    'title callback' => 'election_post_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_post_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['election-post/%election_post/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election-post/%election_post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_post_page_edit',
    'page arguments' => array(1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_post_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election-post/%election_post/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_form_delete_confirm', 1),
    'access callback' => 'election_post_access',
    'access arguments' => array('delete', 1),
    'file' => 'election_post.forms.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_post_menu_alter(&$items) {
  // Change the types of automatic Field UI menu items for a clearer admin UI.
  foreach (election_types() as $type_machine_name => $type) {
    $path = 'admin/config/election/' . $type_machine_name;
    $post_machine_name = $type['post machine name'];
    $post_name_plural = election_get_post_name($type_machine_name, TRUE);
    $items[$path . '/' . $post_machine_name]['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/fields']['description'] = t(
      'Manage fields for %election_type @posts.',
      array(
        '%election_type' => $type['name'],
        '@posts' => $post_name_plural,
      )
    );
    $items[$path . '/' . $post_machine_name . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display/full']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display/teaser']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display']['description'] = t(
      'Manage display for %election_type @posts.',
      array(
        '%election_type' => $type['name'],
        '@posts' => $post_name_plural,
      )
    );
  }
}

/**
 * Implements hook_entity_info().
 */
function election_post_entity_info() {

  $entities = array();

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'access callback' => 'election_post_access',
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election_post',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
      ),
      'teaser' => array(
        'label' => t('Teaser'),
      ),
    ),
    'view callback' => 'entity_metadata_view_single',
  );

  foreach (election_types() as $type_machine_name => $type) {
    $post_machine_name = $type['post machine name'];
    $post_name = election_get_post_name($type_machine_name);
    $entities['election_post']['bundles'][$post_machine_name] = array(
      'label' => drupal_ucfirst($post_name),
      'admin' => array(
        'path' => 'admin/config/election/' . $type_machine_name . '/' . $post_machine_name,
        'real path' => 'admin/config/election/' . $type_machine_name . '/' . $post_machine_name,
        'bundle argument' => 4,
        'access arguments' => array('administer elections'),
      ),
      // Prevent the Metatags module adding elements.
      'metatags' => FALSE,
    );
  }

  return $entities;
}

/**
 * Implements hook_field_extra_fields().
 */
function election_post_field_extra_fields() {
  $info = array();
  foreach (election_types() as $type) {
    $bundle_name = $type['post machine name'];
    $info['election_post'][$bundle_name]['form'] = array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -50,
      ),
      'role_access' => array(
        'label' => t('Role eligibility'),
        'weight' => 10,
      ),
      'voting' => array(
        'label' => t('Voting'),
        'weight' => 90,
      ),
    );
    $info['election_post'][$bundle_name]['display'] = array(
      'election' => array(
        'label' => t('Election'),
        'weight' => 0,
      ),
    );
  }
  return $info;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function election_post_field_extra_fields_alter(&$info) {
  foreach (election_types() as $bundle => $type) {
    $posts_name = election_get_post_name($bundle, TRUE);
    $info['election'][$bundle]['display']['posts'] = array(
      'label' => drupal_ucfirst($posts_name),
      'weight' => 100,
    );
  }
}

/**
 * Implements hook_entity_property_info().
 */
function election_post_entity_property_info() {
  $info = array();
  // Add metadata about election post properties.
  $properties = &$info['election_post']['properties'];
  $properties = array(
    'post_id' => array(
      'label' => t('Post ID'),
      'description' => t('Primary key: the unique identifier for a post.'),
      'type' => 'integer',
      'schema field' => 'post_id',
    ),
    'election_id' => array(
      'label' => t('Election ID'),
      'description' => t('The election for this post.'),
      'type' => 'election',
      'schema field' => 'election_id',
      'required' => TRUE,
    ),
    'type' => array(
      'label' => t('Type'),
      'type' => 'token',
      'schema field' => 'type',
      'required' => TRUE,
    ),
    'title' => array(
      'label' => t('Title'),
      'type' => 'text',
      'schema field' => 'title',
      'required' => TRUE,
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'rids' => array(
      'label' => t('Eligible roles'),
      'type' => 'list<role>',
      'description' => t('Roles that may vote for this post.'),
      'schema field' => 'rids',
    ),
    'allow_abstention' => array(
      'label' => t('Allow abstention'),
      'description' => t('Whether or not to allow voters to abstain.'),
      'type' => 'boolean',
      'schema field' => 'allow_abstention',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'vstatus_inheritance' => array(
      'label' => t('Voting status inheritance'),
      'type' => 'integer',
      'schema field' => 'vstatus_inheritance',
      'setter callback' => 'entity_property_verbatim_set',
      'required' => TRUE,
      'options list' => '_election_post_get_inheritance_options',
    ),
    'nstatus_inheritance' => array(
      'label' => t('Nominations status inheritance'),
      'type' => 'integer',
      'schema field' => 'nstatus_inheritance',
      'setter callback' => 'entity_property_verbatim_set',
      'required' => TRUE,
      'options list' => '_election_post_get_inheritance_options',
    ),
    'created' => array(
      'label' => t('Created time'),
      'type' => 'date',
      'schema field' => 'created',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'changed' => array(
      'label' => t('Last modified time'),
      'type' => 'date',
      'schema field' => 'changed',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
  return $info;
}

/**
 * Get post nomination/voting override values as an array of options.
 */
function _election_post_get_inheritance_options() {
  return array(
    ELECTION_POST_STATUS_INHERIT => t('Inherit'),
    ELECTION_POST_STATUS_CLOSED => t('Closed'),
  );
}

/**
 * Determines whether the given user has access to a post.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param stdClass $post
 *   Optionally a post to check access for. If nothing is given, access for all
 *   posts is determined.
 * @param stdClass $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_post_access($op, $post = NULL, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  $election = empty($post) ? NULL : election_load($post->election_id);
  switch ($op) {
    case 'view':
      // Viewing a post has the same access as viewing an election.
      return election_access($op, $election, $account);
      break;

    case 'create':
    case 'update':
    case 'edit':
    case 'delete':
      // These actions are denied while voting is open for this post.
      // Use the 'bypass running election lock' permission to allow them again.
      if ($post && isset($post->vstatus_inheritance) && _election_post_is_open($post, $election, 'v')) {
        return user_access('bypass running election lock');
      }
      // All these actions on posts have the same access as editing elections.
      return election_access('edit', $election, $account);
      break;

  }
  return FALSE;
}

/**
 * URI callback for a single election post.
 */
function election_post_uri($post) {
  $path = 'election-post/' . $post->post_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/**
 * Get the path part of the election post URI callback as a string.
 *
 * @see election_post_uri()
 */
function election_post_uri_path($post) {
  $uri = election_post_uri($post);
  return $uri['path'];
}

/**
 * Load an individual post.
 *
 * @param int $post_id
 *   A single election post ID.
 * @param bool $reset
 *   Whether to reset the internal cache for election post entities.
 *
 * @return stdClass
 *   A stdClass election_post object.
 */
function election_post_load($post_id, $reset = FALSE) {
  $result = election_post_load_multiple((array) $post_id, $reset);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple posts.
 *
 * @param array $post_ids
 *   An array of election post IDs.
 * @param bool $reset
 *   Whether to reset the internal cache for election post entities.
 *
 * @return array
 *   An array of election post objects keyed by post ID.
 */
function election_post_load_multiple(array $post_ids = array(), $reset = FALSE) {
  // The $conditions parameter is not used as this is deprecated for D8.
  return entity_load('election_post', $post_ids, array(), $reset);
}

/**
 * Count the posts for a given election.
 *
 * @param stdClass $election
 *   The election object (containing at least the property election_id).
 *
 * @return int
 *   The total number of posts.
 */
function _election_post_count_by_election(stdClass $election) {
  $post_counts = &drupal_static(__FUNCTION__, array());
  $election_id = $election->election_id;
  if (!isset($post_counts[$election_id])) {
    $post_counts[$election_id] = db_query(
      'SELECT COUNT(*) FROM {election_post} WHERE election_id = :eid',
      array(':eid' => $election_id)
    )->fetchField();
  }
  return (int) $post_counts[$election_id];
}

/**
 * Implements hook_entity_load().
 */
function election_post_entity_load($entities, $type) {
  $elections = &drupal_static(__FUNCTION__, array());
  // Add 'election' property to posts.
  if ($type == 'election_post') {
    $election_ids = array();
    foreach ($entities as $post) {
      $election_ids[] = $post->election_id;
    }
    if (count(array_diff($election_ids, array_keys($elections)))) {
      $elections += election_load_multiple($election_ids);
    }
    foreach ($entities as $post) {
      if (!isset($post->election) && !empty($elections[$post->election_id])) {
        $post->election = $elections[$post->election_id];
      }
    }
  }
}

/**
 * Wrapper function to allow deleting multiple election posts.
 *
 * @param array $post_ids
 *   Array of post IDs.
 */
function election_post_delete_multiple(array $post_ids) {
  return entity_get_controller('election_post')->delete($post_ids);
}

/**
 * Wrapper function to allow deleting an individual election post.
 *
 * @see election_post_delete_multiple()
 *
 * @param mixed $post_id
 *   Single post ID.
 */
function election_post_delete($post_id) {
  return election_post_delete_multiple(array($post_id));
}

/**
 * Implements hook_entity_insert().
 */
function election_post_entity_insert($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        _election_post_pathauto_update_alias($entity, 'insert');
      }
      break;

  }
}

/**
 * Implements hook_entity_update().
 */
function election_post_entity_update($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        _election_post_pathauto_update_alias($entity, 'update');
      }
      break;

  }
}

/**
 * Implements hook_entity_delete().
 */
function election_post_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated posts when an election is deleted.
    case 'election':
      $post_ids = db_query('SELECT post_id FROM {election_post} WHERE election_id = :eid', array(':eid' => $entity->election_id))->fetchCol();
      election_post_delete_multiple($post_ids);
      break;

    // Delete Pathauto path aliases when a post is deleted.
    case 'election_post':
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election_post', $entity);
      }
      break;

  }
}

/**
 * Wrapper function to allow saving an election post.
 *
 * @param stdClass $post
 *   Election post object.
 */
function election_post_save($post) {
  return entity_get_controller('election_post')->save($post);
}

/**
 * Title callback for adding an election post.
 */
function election_post_page_add_title($election) {
  // Output should not be escaped here; it is done later in the menu system.
  return t('Add new !post_name', array('!post_name' => election_get_post_name($election->type)));
}

/**
 * Title callback for election-post/%election_post.
 */
function election_post_page_title($post) {
  // Output should not be escaped here; it is done later in the menu system.
  return $post->title;
}

/**
 * Implements hook_theme().
 */
function election_post_theme() {
  return array(
    'election_post' => array(
      'render element' => 'elements',
      'template' => 'election-post',
      'file' => 'election_post.theme.inc',
    ),
  );
}

/**
 * Generate an array for rendering the given election post.
 *
 * @param stdClass $post
 *   An election post object.
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 *
 * @return array
 *   An array as expected by drupal_render().
 */
function election_post_view($post, $view_mode = 'full') {

  // Remove previously built content, if it exists.
  $post->content = array();

  // Display a link to the election, if we're not on the election's page.
  $election = $post->election;
  $election_uri = election_uri($election);
  if (current_path() != $election_uri['path']) {
    $post->content['election'] = array(
      '#theme' => 'election_info_item',
      '#label' => t('Election'),
      '#html' => TRUE,
      '#value' => l($election->title, $election_uri['path'], $election_uri['options']),
    );
  }

  // Build fields content.
  // In case of a multiple view, node_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('election_post', array($post->post_id => $post), $view_mode);
  entity_prepare_view('election_post', array($post->post_id => $post));
  $post->content += field_attach_view('election_post', $post, $view_mode);

  $build = $post->content;
  // We don't need duplicate rendering info in $post->content.
  unset($post->content);

  $build += array(
    '#theme' => 'election_post',
    '#post' => $post,
    '#view_mode' => $view_mode,
  );

  // Add contextual links for this post, except when the post is already being
  // displayed on its own page. Modules may alter this behavior (for example,
  // to restrict contextual links to certain view modes) by implementing
  // hook_election_post_view_alter().
  if (!empty($post->post_id) && $view_mode != 'full') {
    $build['#contextual_links']['election_post'] = array('election-post', array($post->post_id));
  }

  // Allow modules to modify the structured post.
  $type = 'election_post';
  drupal_alter(array('election_post_view', 'entity_view'), $build, $type);

  return $build;

}

/**
 * Find out if a post is open.
 *
 * @param stdClass $post
 *   An election post object.
 * @param stdClass $election
 *   An election object.
 * @param string $status_prefix
 *   The type of status ('v' for voting, 'n' for nominations).
 */
function _election_post_is_open(stdClass $post, $election = NULL, $status_prefix = 'v') {
  $status_inheritance = $post->{$status_prefix . 'status_inheritance'};
  if ($status_inheritance == ELECTION_POST_STATUS_CLOSED) {
    return FALSE;
  }
  if (empty($election)) {
    $election = $post->election;
  }
  $status = $election->{$status_prefix . 'status'};
  $open_time = $election->{$status_prefix . 'open_time'};
  $close_time = $election->{$status_prefix . 'close_time'};
  return _election_is_open($status, $open_time, $close_time);
}

/**
 * Menu callback for an election post, path: election-post/%election_post.
 *
 * @param stdClass $post
 *   An election post object.
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 */
function election_post_page_view($post, $view_mode = 'full') {

  election_set_breadcrumb($post->election);

  return election_post_view($post, $view_mode);

}

/**
 * Set the breadcrumb for an election post.
 *
 * @param stdClass $election
 *   An election object.
 * @param stdClass $post
 *   An election post object (optional).
 */
function election_post_set_breadcrumb(stdClass $election, stdClass $post = NULL) {
  $links = array();
  $links[] = l(t('Home'), '<front>');
  $links[] = l(t('Elections'), 'elections');
  $links[] = l($election->title, election_uri_path($election));
  if ($post) {
    $links[] = l($post->title, election_post_uri_path($post));
  }
  drupal_set_breadcrumb($links);
}

/**
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to a post entity
 * via a file field.
 */
function election_post_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election_post' && !empty($entity->election_id)) {
    $election = election_load($entity->election_id);
    return election_access('view', $election);
  }
}

/**
 * Implements hook_views_api().
 */
function election_post_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views().
 */
function election_post_views_default_views() {
  $views_dir = drupal_get_path('module', 'election_post') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}

/**
 * Update the URL aliases for an individual election post.
 *
 * @param stdClass $post
 *   An election post object.
 * @param string $op
 *   Operation being performed on the post ('insert', 'update' or 'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function _election_post_pathauto_update_alias(stdClass $post, $op, array $options = array()) {
  // Skip processing if the post has no pattern.
  if (!pathauto_pattern_load_by_entity('election_post', $post->type)) {
    return;
  }
  $election = empty($post->election) ? election_load($post->election_id) : $post->election;
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election_post',
    $op,
    election_post_uri_path($post),
    array('election_post' => $post, 'election' => $election),
    $post->type
  );
}

/**
 * Update the URL aliases for multiple election posts.
 *
 * @param array $post_ids
 *   An array of election post IDs.
 * @param string $op
 *   Operation being performed on the posts ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function _election_post_pathauto_update_alias_multiple(array $post_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $posts = election_post_load_multiple($post_ids);
  foreach ($posts as $post) {
    _election_post_pathauto_update_alias($post, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($post_ids), 'Updated URL alias for 1 post.', 'Updated URL aliases for @count posts.'));
  }
}

/**
 * Implements hook_ENTITY_view_alter().
 */
function election_post_election_view_alter(&$build) {
  if (!isset($build['posts']) && $build['#view_mode'] == 'full') {
    $election = $build['#election'];
    $posts_name = election_get_post_name($election->type, TRUE);
    $view = views_get_view('election_posts', 'default', $election->election_id);
    $build['posts'] = array(
      '#prefix' => '<div class="election-posts"><h2>' . drupal_ucfirst(check_plain($posts_name)) . '</h2>',
      '#markup' => views_embed_view('election_posts', 'embed', $election->election_id),
      '#suffix' => '</div>',
    );
  }
}
