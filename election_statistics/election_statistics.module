<?php
/**
 * @file
 * Election Statistics primary module file.
 */

/**
 * Implements hook_menu().
 */
function election_statistics_menu() {
  $items = array();

  $items['election/%election/statistics'] = array(
    'title' => 'Statistics',
    'page callback' => 'election_statistics_page',
    'page arguments' => array(1),
    'access callback' => 'election_statistics_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function election_statistics_permission() {
  $permissions = array(
    'view election statistics' => array(
      'title' => t('View election statistics'),
      'description' => t('This allows the user to view election statistics, if they already have permission to view the election.'),
    ),
  );
  return $permissions;
}

/**
 * Access callback for viewing an election's statistics.
 */
function election_statistics_access($op, $election, $account = NULL) {
  if (!election_access('view', $election, $account)) {
    return FALSE;
  }
  return user_access('view election statistics');
}

/**
 * Implements hook_theme().
 */
function election_statistics_theme() {
  return array(
    'election_statistics' => array(
      'variables' => array(
        'election' => NULL,
      ),
    ),
  );
}

/**
 * Theme election statistics.
 */
function theme_election_statistics($variables) {

  $output = render($variables['content']);

  return $output;
}

/**
 * Implements template_preprocess_election_statistics().
 */
function election_statistics_preprocess_election_statistics(&$variables) {
  $election = $variables['election'];

  $totals = db_query('SELECT COUNT(DISTINCT IF(abstain=0,ballot_id,NULL)) AS votes, COUNT(DISTINCT IF(abstain=1, ballot_id, NULL)) AS abstentions FROM {election_vote} WHERE election_id = :eid', array(':eid' => $election->election_id))->fetch();
  $totals->voters = db_query('SELECT COUNT(DISTINCT IF(uid = 0, sid_hash, uid)) AS voters FROM {election_ballot} WHERE election_id = :eid', array(':eid' => $election->election_id))->fetchField();

  $post_ids = db_query('SELECT post_id FROM {election_post} WHERE election_id = :eid ORDER BY title', array(':eid' => $election->election_id))->fetchCol();
  $totals->posts = count($post_ids);

  $post_name = _election_get_posts_name($election->type);
  $posts_name = _election_get_posts_name($election->type, TRUE);

  $header = array(
    'posts' => check_plain(drupal_ucfirst($posts_name)),
    'voters' => t('Voters'),
    'votes' => t('Votes'),
    'abstentions' => t('Abstentions'),
  );
  $rows = array();
  $rows[0] = array(
    'posts' => number_format($totals->posts),
    'voters' => number_format($totals->voters),
    'votes' => number_format($totals->votes),
    'abstentions' => number_format($totals->abstentions),
  );

  if (!empty($election->type_info['has candidates'])) {
    $candidates = db_query('SELECT COUNT(DISTINCT candidate_id) AS total, COUNT(DISTINCT IF(cstatus=:approved,candidate_id,NULL)) AS approved FROM {election_candidate} WHERE election_id = :eid', array(':eid' => $election->election_id, ':approved' => ELECTION_CANDIDATE_APPROVED))->fetch();
    $header += array(
      'candidates' => t('Candidates'),
      'approved_candidates' => t('Approved candidates'),
    );
    $rows[0] += array(
      'candidates' => number_format($candidates->total),
      'approved_candidates' => number_format($candidates->approved),
    );
  }

  $election_table = array(
    '#caption' => t('Election totals'),
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  $posts_table = NULL;
  if ($totals->votes > 0 && count($post_ids)) {
    $posts = election_post_load_multiple($post_ids);
    $header = array(
      'post' => check_plain(drupal_ucfirst($post_name)),
      'votes' => t('Votes'),
      'abstentions' => t('Abstentions'),
    );
    $rows = array();
    $posts_statistics = db_query('SELECT post_id, COUNT(DISTINCT IF(abstain=0,ballot_id,NULL)) AS votes, COUNT(DISTINCT IF(abstain=1,ballot_id,NULL)) AS abstentions FROM {election_vote} WHERE post_id IN(:pid) GROUP BY post_id', array(':pid' => $post_ids))->fetchAllAssoc('post_id');
    foreach ($posts as $post) {
      if (!isset($posts_statistics[$post->post_id])) {
        continue;
      }
      $stats = $posts_statistics[$post->post_id];
      $rows[] = array(
        'post' => l($post->title, election_post_uri_path($post)),
        'votes' => number_format($stats->votes),
        'abstentions' => number_format($stats->abstentions),
      );
    }
    $posts_table = array(
      '#caption' => t('Totals per @post_name', array('@post_name' => $post_name)),
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
  }

  $top_ips_table = NULL;
  $ips = db_query_range('SELECT ip, COUNT(DISTINCT IF(uid = 0, sid_hash, uid)) AS voters FROM {election_ballot} WHERE election_id = :eid GROUP BY ip ORDER BY COUNT(DISTINCT uid) DESC, COUNT(DISTINCT ballot_id) DESC', 0, 10, array(':eid' => $election->election_id));
  if ($ips->rowCount()) {
    $header = array(t('IP address'), t('Voters'));
    $rows = array();
    foreach ($ips as $row) {
      $rows[] = array(check_plain($row->ip), number_format((int) $row->voters));
    }
    $top_ips_table = array(
      '#caption' => t('Top 10 IP addresses'),
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
  }

  $last_ips_table = NULL;
  $last_ips = db_query_range('SELECT timestamp, ip, agent FROM {election_ballot} WHERE election_id = :eid ORDER BY timestamp DESC', 0, 10, array(':eid' => $election->election_id));
  if ($last_ips->rowCount()) {
    $header = array(t('Time'), t('IP address'), t('Browser'));
    $rows = array();
    $browsecap = TRUE;
    if (!ini_get('browscap')) {
      $browsecap = FALSE;
    }
    foreach ($last_ips as $row) {
      $browser = FALSE;
      if ($browsecap) {
        $browser = get_browser($row->agent);
      }
      $rows[] = array(
        format_date($row->timestamp, 'short'),
        check_plain($row->ip),
        $browser ? check_plain($browser->parent) : t('Browscap not installed'),
      );
    }
    $last_ips_table = array(
      '#caption' => t('Last 10 IP addresses'),
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
  }

  $variables['totals'] = $totals;

  $variables['content'] = array();
  $variables['content']['election_table'] = $election_table;
  $variables['content']['posts_table'] = $posts_table;
  $variables['content']['top_ips_table'] = $top_ips_table;
  $variables['content']['last_ips_table'] = $last_ips_table;

}

/**
 * Page callback for election/%election/statistics.
 */
function election_statistics_page(stdClass $election) {
  drupal_set_title(t('Statistics: %election', array('%election' => $election->title)), PASS_THROUGH);
  drupal_set_breadcrumb(_election_build_breadcrumb($election));
  return theme('election_statistics', array('election' => $election));
}
