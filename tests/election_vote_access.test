<?php
/**
 * @file
 * Test the Election Vote module for access control.
 */

class ElectionVoteAccessTestCase extends DrupalWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Vote Access',
      'description' => 'Test access control for voting.',
      'group' => 'Election',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test access to vote for posts by role.
   */
  public function testVoteRoleAccess() {
    // Check for two different roles.
    $iterations = 2;
    // Create roles with the necessary permissions to vote, and a single user
    // for each of those roles.
    $rids = array();
    $accounts = array();
    for ($i = 1; $i <= $iterations; $i++) {
      $role_name = $this->randomName();
      $rids[$i] = $this->drupalCreateRole(array(
        'view published elections',
        'vote in elections',
      ), $role_name);
      $accounts[$i] = $this->drupalCreateUser();
      $edit = array('roles' => array($rids[$i] => $role_name));
      user_save($accounts[$i], $edit);
      $this->assertTrue(in_array($role_name, $accounts[$i]->roles), t('User %name granted role %role_name.', array(
        '%name' => $accounts[$i]->name,
        '%role_name' => $role_name,
      )));
    }
    $election_controller = entity_get_controller('election');
    $post_controller = entity_get_controller('election_post');
    $admin_user = $this->drupalCreateUser(array(
      'create elections',
      'edit own elections',
    ));
    foreach (election_types() as $bundle => $election_type) {
      // Create a published election with open voting.
      $election = $election_controller->create(array(
        'title' => $this->randomString(),
        'uid' => $admin_user->uid,
        'type' => $bundle,
        'published' => 1,
        'vstatus' => ELECTION_STATUS_OPEN,
      ));
      election_save($election);
      // Reload the election so it gets processed correctly.
      $election = election_load($election->election_id, TRUE);
      // Create test posts, each allowing a single role to vote.
      foreach ($rids as $rid) {
        $post = $post_controller->create(array(
          'type' => $election_type['post machine name'],
          'title' => $this->randomString(),
          'election_id' => $election->election_id,
          'rids' => array($rid),
        ));
        election_post_save($post);
        // Reload the post so it gets processed correctly.
        $post = election_post_load($post->post_id, TRUE);
        // Add candidates, if relevant, because voting would be closed if there
        // were not sufficient candidates.
        if (module_exists('election_candidate') && election_candidate_check_support($election)) {
          $num_required = isset($post->vacancy_count) ? $post->vacancy_count + 1 : 2;
          for ($i = 1; $i <= $num_required; $i++) {
            $candidate = $this->helperElectionCandidateCreate($post);
            $this->assertTrue(!empty($candidate), t('Candidate %name created.', array(
              '%name' => election_candidate_get_name($candidate, FALSE),
            )));
          }
        }
        // Check voting access for each user for this post. If a user has the
        // role assigned to the post, then the user should be allowed to vote,
        // and vice versa.
        foreach ($accounts as $account) {
          $should_have_access = isset($account->roles[$rid]);

          // Check that election_vote_access() returns the correct value.
          if ($should_have_access) {
            $this->assertTrue(election_vote_access('vote', $post, $account), t('User has access to vote'));
          }
          else {
            $this->assertFalse(election_vote_access('vote', $post, $account), t('User does not have access to vote'));
          }

          // Check that voting access is displayed correctly on the post for
          // this account.
          $this->drupalLogin($account);
          $this->drupalGet('election-post/' . $post->post_id);
          if ($should_have_access) {
            $this->assertText(t('You can vote'));
          }
          else {
            $this->assertRaw(t('You are not eligible to vote for this @post', array(
              '@post' => election_get_post_name($election->type),
            )));
          }
          $this->drupalLogout();
        }
      }
    }
  }

  /**
   * Helper function to create an election candidate for a given post.
   *
   * @param object $post
   *   An election post object.
   *
   * @return object
   *   A saved candidate object, associated with the given post. The candidate
   *   will be published and in the 'Hopeful' status.
   */
  protected function helperElectionCandidateCreate(stdClass $post) {
    $candidate_controller = entity_get_controller('election_candidate');
    $candidate_type = !empty($post->settings['candidate_type']) ? $post->settings['candidate_type'] : 'candidate';
    $candidate_properties = array(
      'type' => $candidate_type,
      'election_id' => $post->election->election_id,
      'post_id' => $post->post_id,
      'cstatus' => ELECTION_CANDIDATE_HOPEFUL,
      'published' => 1,
    );
    $candidate = $candidate_controller->create($candidate_properties);
    $candidate->candidate_name[LANGUAGE_NONE][0]['given'] = $this->randomString();
    $candidate->candidate_name[LANGUAGE_NONE][0]['family'] = $this->randomString();
    $candidate->candidate_mail[LANGUAGE_NONE][0]['email'] = $this->randomName() . '@example.com';
    election_candidate_save($candidate);
    return $candidate;
  }

}
