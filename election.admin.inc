<?php
/**
 * @file
 * Administration page callbacks for the Election module.
 *
 * @todo
 * Theming and Views
 */

/**
 * Page callback for editing an election, path: election/%election/edit.
 *
 * @param stdClass $election
 *
 * @return array
 *   Render array generated by Form API for the form: election_form.
 */
function election_page_edit($election) {

  $type = _election_type_load($election->type);
  $title = t(
    'Edit @type: %title',
    array(
      '@type' => $type['name'],
      '%title' => $election->title,
    )
  );

  drupal_set_title($title, PASS_THROUGH);
  drupal_set_breadcrumb(
    _election_build_breadcrumb($election)
  );

  return drupal_get_form('election_form', $election);
}


/**
 * Form builder function for the main administrative election list.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 *   Render array.
 */
function election_list_form($form, $form_state) {

  // Build the sortable table header.
  $header = array(
    'title' => array('data' => t('Title'), 'field' => 'e.title'),
    'type' => array('data' => t('Type'), 'field' => 'e.type'),
    'anonymity' => array('data' => t('Anonymity'), 'field' => 'e.anonymous'),
    'nstatus' => array('data' => t('Nominations status'), 'field' => 'e.nstatus'),
    'vstatus' => array('data' => t('Voting status'), 'field' => 'e.vstatus'),
    // 'vopen' => array('data' => t('Voting opens'), 'field' => 'e.vopen_time'),
    // 'vclose' => array('data' => t('Voting closes'), 'field' => 'e.vclose_time'),
    'changed' => array('data' => t('Last updated'), 'field' => 'e.changed', 'sort' => 'desc'),
    'operations' => array('data' => t('Operations')),
  );

  // Build the election query, adding a pager and sorter.
  $query = db_select('election', 'e')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->fields('e', array('election_id'))
    ->limit(50)
    ->orderByHeader($header);

  // Get an array of election IDs
  $election_ids = $query->execute()->fetchCol();

  $elections = election_load_multiple($election_ids);

  $destination = drupal_get_destination();

  $options = array();
  foreach ($elections as $id => $election) {

    $type = _election_type_load($election->type);

    $options[$election->election_id] = array(
      'title' => l($election->title, election_uri_path($election)),
      'type' => drupal_ucfirst($type['name']),
      'anonymity' => $election->anonymous? t('Anonymous') : t('Tracked'),
      'nstatus' => _election_format_status($election, 'n'),
      'vstatus' => _election_format_status($election, 'v'),
      // 'vopen' => '',
      // 'vclose' => '',
      'changed' => format_date($election->changed, 'short'),
      'operations' => array(),
    );

    foreach (array('vopen', 'vclose') as $event) {
      if (!isset($options[$event])) {
        continue;
      }
      if ($election->vstatus != ELECTION_STATUS_SCHEDULED) {
        $options[$election->election_id][$event] = t('N/A');
        continue;
      }
      $time = $election->{$event . '_time'};
      if (is_numeric($time)) {
        $options[$election->election_id][$event] = format_date($time, 'short');
      }
      elseif (empty($time)) {
        $options[$election->election_id][$event] = t('Not set');
      }
    }

    $post_name = _election_get_posts_name($election->type);
    $post_name_plural = _election_get_posts_name($election->type, TRUE);

    $operations = array();
    if (entity_access('update', 'election', $election)) {
      // No need for this and it could be confusing
      // $operations['posts_add'] = l(
      //   t('add @post_name', array('@post_name' => $post_name)),
      //   election_uri_path($election) . '/posts/add'
      // );
      $operations['posts_list'] = l(
        t('list @post_name_plural', array('@post_name_plural' => $post_name_plural)),
        election_uri_path($election) . '/posts'
      );
    }

    if (entity_access('update', 'election', $election)) {
      $operations['edit'] = l(
        t('edit'),
        election_uri_path($election) . '/edit',
        array('query' => $destination)
      );
    }

    if (entity_access('delete', 'election', $election)) {
      $operations['delete'] = l(
        t('delete'),
        election_uri_path($election) . '/delete',
        array('query' => $destination)
      );
    }

    if (count($operations)) {
      // Render an unordered list of operations links.
      $options[$election->election_id]['operations'] = array(
        'data' => array(
          '#theme' => 'item_list',
          '#items' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      );
    }

  }

  if (FALSE) { // don't bother with tableselect yet
    $form['elections'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No elections available.'),
    );
  }
  else {
    $form['elections'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $options,
      '#empty' => t('No elections available.'),
    );
  }

  $form['pager'] = array('#markup' => theme('pager'));

  return $form;
}

/**
 * Page callback for adding an election, path: admin/election/list/add/%.
 *
 * @param string $type_mn
 *   The machine name of the election type (bundle key).
 *
 * @return array
 *   Render array generated by Form API for the form: election_form.
 */
function election_page_add($type_mn) {

  global $user;

  if (!$type = _election_type_load($type_mn)) {
    return MENU_NOT_FOUND;
  }

  $election = entity_get_controller('election')->create(array('type' => $type_mn));

  drupal_set_title(
    t('Add new @type', array('@type' => $type['name'])),
    PASS_THROUGH
  );

  return drupal_get_form('election_form', $election);

}


/**
 * Form builder function for adding or editing an election.
 * See http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7.
 *
 * @param array $form
 * @param array $form_state
 * @param stdClass $election
 *
 * @return array
 *   Render array.
 */
function election_form($form, &$form_state, $election) {

  $form['#id'] = 'election-form';
  $form['#election'] = $election;

  $form_state['election'] = $election;

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($election->title)? $election->title : '',
    '#required' => TRUE,
  );

  $date_format = variable_get('date_format_short', 'Y-m-d H:i');
  $date_widget = 'textfield';
  if (module_exists('date_popup')) {
    $date_widget = 'date_popup';
  }
  elseif (module_exists('date')) {
    $date_widget = 'date_text';
  }

  if ($election->type != 'referendum') {
    //$nopen_default = isset($election->nopen_time)? $election->nopen_time : strtotime('+1 Friday 10am');
    //$nclose_default = isset($election->nclose_time)? $election->nclose_time : strtotime('+2 Friday 10am');
    $nopen_default = isset($election->nopen_time)? $election->nopen_time : NULL;
    $nclose_default = isset($election->nclose_time)? $election->nclose_time : NULL;

    $form['nstatus'] = array(
      '#type' => 'select',
      '#title' => t('Nominations status'),
      '#default_value' => isset($election->nstatus)? $election->nstatus : ELECTION_STATUS_CLOSED,
      '#options' => array(
        ELECTION_STATUS_CLOSED => t('Closed'),
        ELECTION_STATUS_OPEN => t('Open'),
        ELECTION_STATUS_SCHEDULED => t('Scheduled'),
      ),
    );
    $form['nschedule'] = array(
      '#title' => t('Nominations schedule'),
      '#type' => 'fieldset',
      '#description' => 'Set the opening and closing times for nominations.',
      '#states' => array(
        'visible' => array(
          ':input[name=nstatus]' => array('value' => (string) ELECTION_STATUS_SCHEDULED),
        ),
      ),
    );
    $form['nschedule']['nopen_time'] = array(
      '#title' => t('Opening time'),
      '#type' => $date_widget,
      '#default_value' => $nopen_default? date('Y-m-d H:i:s', $nopen_default) : NULL,
      '#date_format' => $date_format,
      '#date_increment' => 5,
      '#date_year_range' => '-2:+5',
    );
    $form['nschedule']['nclose_time'] = array(
      '#title' => t('Closing time'),
      '#type' => $date_widget,
      '#default_value' => $nclose_default? date('Y-m-d H:i:s', $nclose_default) : NULL,
      '#date_format' => $date_format,
      '#date_increment' => 5,
      '#date_year_range' => '-2:+5',
    );
  }

//  $vopen_default = isset($election->vopen_time)? $election->vopen_time : strtotime('+3 Friday 10am');
//  $vclose_default = isset($election->vclose_time)? $election->vclose_time : strtotime('+4 Friday 10am');
  $vopen_default = isset($election->vopen_time)? $election->vopen_time : NULL;
  $vclose_default = isset($election->vclose_time)? $election->vclose_time : NULL;

  $form['vstatus'] = array(
    '#type' => 'select',
    '#title' => t('Voting status'),
    '#default_value' => isset($election->vstatus)? $election->vstatus : ELECTION_STATUS_CLOSED,
    '#options' => array(
      ELECTION_STATUS_CLOSED => t('Closed'),
      ELECTION_STATUS_OPEN => t('Open'),
      ELECTION_STATUS_SCHEDULED => t('Scheduled'),
    ),
  );
  $form['vschedule'] = array(
    '#title' => t('Voting schedule'),
    '#type' => 'fieldset',
    '#description' => 'Set the opening and closing times for voting.',
    '#states' => array(
      'visible' => array(
        ':input[name=vstatus]' => array('value' => (string) ELECTION_STATUS_SCHEDULED),
      ),
    ),
  );
  $form['vschedule']['vopen_time'] = array(
    '#title' => t('Opening time'),
    '#type' => $date_widget,
    '#default_value' => $vopen_default? date('Y-m-d H:i:s', $vopen_default) : NULL,
    '#date_format' => $date_format,
    '#date_increment' => 5,
    '#date_year_range' => '-2:+5',
  );
  $form['vschedule']['vclose_time'] = array(
    '#title' => t('Closing time'),
    '#type' => $date_widget,
    '#default_value' => $vclose_default? date('Y-m-d H:i:s', $vclose_default) : NULL,
    '#date_format' => $date_format,
    '#date_increment' => 5,
    '#date_year_range' => '-2:+5',
  );

  $form['anonymous'] = array(
    '#title' => t('Voter anonymity'),
    '#type' => 'select',
    '#default_value' => isset($election->anonymous)? $election->anonymous : 0,
    '#options' => array(
      // These integer keys are meaningful: they are Boolean for "is anonymous".
      0 => 'Tracked: voters can be identified if necessary.',
      1 => 'Anonymous: voters can never be identified.',
    ),
    '#required' => TRUE,
    //'#description' => 'If this is set to Tracked, it is technically possible (although not easy) to link votes with voters. This may be useful for testing purposes. If this is set to Anonymous during voting, it is impossible to make this link. Tracking won\'t work retrospectively.',
    '#weight' => 80,
  );

  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('election_form_submit'),
  );

  if (!empty($election->election_id)) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('election_form_delete_submit'),
      '#access' => entity_access('delete', 'election', $election),
    );
  }

  $form['#validate'][] = 'election_form_validate';

  // Add custom fields from the Field system.
  field_attach_form('election', $election, $form, $form_state);

  return $form;

}

/**
 * Form validate function for the form election_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function election_form_validate($form, &$form_state) {

  // VALIDATE NOMINATIONS SCHEDULE
  if (isset($form_state['values']['nstatus'])) {
    // Check that the opening and closing times are set if nominations are scheduled.
    if ($form_state['values']['nstatus'] == ELECTION_STATUS_SCHEDULED
        && (empty($form_state['values']['nopen_time']) || empty($form_state['values']['nclose_time']))) {
      form_set_error('nschedule', t('You must set the opening and closing times when the nominations status is Scheduled.'));
    }
    // Check that the closing time is after the opening time.
    elseif ($form_state['values']['nstatus'] == ELECTION_STATUS_SCHEDULED
          && strtotime($form_state['values']['nclose_time']) <= strtotime($form_state['values']['nopen_time'])) {
      form_set_error('nschedule', t('The closing time of nominations must be after the opening time.'));
    }
    // Check that the voting time is after the nominations close.
    elseif (@$form_state['values']['vstatus'] == ELECTION_STATUS_SCHEDULED
          && strtotime($form_state['values']['vopen_time']) < strtotime($form_state['values']['nclose_time'])) {
      form_set_error('nschedule', t('Nominations can only be scheduled so that they close before the start of voting.'));
    }
  }

  // VALIDATE VOTING SCHEDULE
  if (isset($form_state['values']['vstatus'])) {
    // Check that the opening and closing times are set if voting is scheduled.
    if ($form_state['values']['vstatus'] == ELECTION_STATUS_SCHEDULED
        && (empty($form_state['values']['vopen_time']) || empty($form_state['values']['vclose_time']))) {
      form_set_error('vschedule', t('You must set the opening and closing times when the voting status is Scheduled.'));
    }
    // Check that the closing time is after the opening time.
    elseif ($form_state['values']['vstatus'] == ELECTION_STATUS_SCHEDULED
          && strtotime($form_state['values']['vclose_time']) <= strtotime($form_state['values']['vopen_time'])) {
      form_set_error('vschedule', t('The closing time of voting must be after the opening time.'));
    }
  }

  // Check other Fields.
  field_attach_form_validate('election', $form_state['election'], $form, $form_state);

}

/**
 * Form submit function for the Save button in the form election_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function election_form_submit($form, &$form_state) {
  global $user;
  $election = &$form_state['election'];

  if (empty($election->uid)) {
    $election->uid = $user->uid;
  }

  foreach ($election as $property => $value) {
    if (isset($form_state['values'][$property])) {
      $election->$property = $form_state['values'][$property];
    }
  }

  field_attach_submit('election', $election, $form, $form_state);

  // Save the election.
  election_save($election);

  // Notify the user that the election was saved.
  $type = _election_type_load($election->type);
  drupal_set_message(
    t('The @type "@title" was saved.', array('@type' => $type['name'], '@title' => $election->title))
  );

  $form_state['redirect'] = 'admin/election/list';
}

/**
 * Form submit function for the Delete button in the form election_form.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function election_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $election = $form['#election'];
  $form_state['redirect'] = array(
    election_uri_path($election) . '/delete',
    array('query' => $destination),
  );
}

/**
 * Form builder function to confirm the delete action for an election.
 * See http://api.drupal.org/api/drupal/modules--system--system.module/function/confirm_form.
 *
 * @param array $form
 * @param array &$form_state
 * @param stdClass $election
 *
 * @return array
 *   Render array.
 */
function election_form_delete_confirm($form, &$form_state, $election) {

  drupal_set_breadcrumb(
    _election_build_breadcrumb($election)
  );

  $form['#election'] = $election;
  $form['election_id'] = array(
    '#type' => 'value',
    '#value' => $election->election_id,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete %title?', array('%title' => $election->title)),
    election_uri_path($election),
    t('Deleting an election also deletes ALL associated data, for example votes. This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Form submit function for the Delete button in the form election_form_delete_confirm.
 *
 * @param array $form
 * @param array &$form_state
 * @return void
 */
function election_form_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $election = election_load($form_state['values']['election_id']);
    $delete = election_delete($form_state['values']['election_id']);
    if ($delete) {
      watchdog('election', 'Deleted election "%title" (type: @type)', array('@type' => $election->type, '%title' => $election->title));
    }

    $type = _election_type_load($election->type);

    if ($delete) {
      drupal_set_message(
        t('The @type %title has been deleted.', array('@type' => $type['name'], '%title' => $election->title))
      );
    }
    else {
      drupal_set_message(
        t('Failed to delete the @type %title.', array('@type' => $type['name'], '%title' => $election->title)),
        'error'
      );
    }

  }
  $form_state['redirect'] = 'admin/election/list';
}
