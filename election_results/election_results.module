<?php
/**
 * @file
 * Main file for the Election Result module.
 */

/**
 * Implements hook_menu().
 */
function election_results_menu() {
  $items = array();
  $items['election-post/%election_post/results'] = array(
    'title' => 'Results',
    'page callback' => 'election_results_page',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['election-post/%election_post/results/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['election-post/%election_post/results/download'] = array(
    'title' => 'Download',
    'page callback' => 'election_results_download',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('download', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function election_results_permission() {
  return array(
    'view any election results' => array(
      'title' => t('View or download any election results'),
      'description' => t('This allows the user to view or download the results of any elections.'),
    ),
    'view own election results' => array(
      'title' => t('View or download own election results'),
      'description' => t('This allows the user to view or download the results of their own elections (those to which they have editing access).'),
    ),
  );
}

/**
 * Access callback for viewing an election post's results.
 */
function election_results_access($op, stdClass $post, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $election = $post->election;
  switch ($op) {
    case 'view':
      if (empty($election->type_info['results page']) || !function_exists($election->type_info['results page'])) {
        return FALSE;
      }
      break;

    case 'download':
      if (empty($election->type_info['results download form']) || !function_exists($election->type_info['results download form'])) {
        return FALSE;
      }
      break;

  }
  if (_election_post_is_open($post, NULL, 'v') && !user_access('bypass running election lock', $account)) {
    return FALSE;
  }
  if (election_post_access('edit', $post, $account) && user_access('view own election results', $account)) {
    return TRUE;
  }
  if (user_access('view any election results', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_entity_load().
 */
function election_results_entity_load($entities, $type) {
  $ballot_counts = &drupal_static(__FUNCTION__, array());
  // Add 'ballot_count' property to posts.
  if ($type == 'election_post') {
    if (count(array_diff_key($entities, $ballot_counts))) {
      $ballot_counts = db_query(
        'SELECT post_id, COUNT(DISTINCT ballot_id) AS ballot_count FROM {election_ballot} WHERE post_id IN(:pids) GROUP BY post_id',
        array(':pids' => array_keys($entities))
      )->fetchAllAssoc('post_id');
    }
    foreach ($entities as $post_id => $post) {
      if (isset($ballot_counts[$post_id])) {
        $post->ballot_count = $ballot_counts[$post_id]->ballot_count;
      }
      else {
        $post->ballot_count = 0;
      }
    }
  }
}

/**
 * Page callback for election-post/%election_post/results.
 */
function election_results_page(stdClass $post) {

  $election = $post->election;

  drupal_set_title(t('Results: %post', array('%post' => $post->title)), PASS_THROUGH);
  drupal_set_breadcrumb(_election_build_breadcrumb($election, '_MANAGE_POSTS_'));

  $output = array();

  if (empty($post->ballot_count)) {
    return array(
      '#markup' => '<p>' . t('No ballots have been cast for this @post.', array('@post' => election_get_post_name($election->type))) . '</p>',
    );
  }

  $totals = db_query(
    'SELECT COUNT(DISTINCT IF(abstain = 0, ballot_id, NULL)) AS votes, COUNT(DISTINCT IF(abstain = 1, ballot_id, NULL)) AS abstentions FROM {election_vote} WHERE post_id = :pid',
    array(
      ':pid' => $post->post_id,
    )
  )->fetch();

  if ($totals->votes == 0 && $totals->abstentions == 0) {
    return $output;
  }

  $header = array(
    'ballots' => t('Ballots'),
    'votes' => t('Votes'),
    'abstentions' => t('Abstentions'),
  );

  $rows = array();
  $rows[0] = array(
    'ballots' => number_format($post->ballot_count),
    'votes' => number_format($totals->votes),
    'abstentions' => number_format($totals->abstentions),
  );

  $output['totals'] = array(
    '#theme' => 'table',
    '#caption' => t('Totals'),
    '#header' => $header,
    '#rows' => $rows,
  );

  if (!empty($election->type_info['results page']) && function_exists($election->type_info['results page'])) {
    $function = $election->type_info['results page'];
    $output += $function($post, $totals);
  }

  return $output;

}

/**
 * Page callback for election-post/%election_post/results/download.
 */
function election_results_download(stdClass $post) {

  $election = $post->election;

  drupal_set_title(t('Download results: %post', array('%post' => $post->title)), PASS_THROUGH);
  drupal_set_breadcrumb(_election_build_breadcrumb($election, '_MANAGE_POSTS_'));

  if (!empty($election->type_info['results download form']) && function_exists($election->type_info['results download form'])) {
    $form = $election->type_info['results download form'];
    return drupal_get_form($form, $post);
  }
  else {
    return MENU_NOT_FOUND;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the form at election/%election/posts.
 */
function election_results_form_election_post_manage_form_alter(&$form) {
  $election = $form['#election'];
  $posts = $form['#posts'];
  foreach ($form['election_posts']['#rows'] as $post_id => &$row) {
    $post = $posts[$post_id];
    $path = election_post_uri_path($post);
    // Add a 'results' link.
    if (election_results_access('view', $post)) {
      $row['operations']['data']['#items']['results'] = l(
        t('results (@count)', array('@count' => $post->ballot_count)),
        $path . '/results'
      );
    }
  }
}
