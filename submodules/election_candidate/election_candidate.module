<?php
/**
 * @file
 * Election Candidate: primary module file.
 */

// Required files.
require_once 'election_candidate.constants.inc';


/**
 * Implements hook_entity_info().
 */
function election_candidate_entity_info() {

  $entities = array();

  $entities['election_candidate'] = array(
    'label' => t('Election candidate'),
    'access callback' => 'election_candidate_access',
    'uri callback' => 'election_candidate_uri',
    'controller class' => 'ElectionCandidateController',
    'base table' => 'election_candidate',
    'label callback' => 'election_candidate_label',
    'entity keys' => array(
      'id' => 'candidate_id',
    ),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'bundles' => array(
      // Single bundles are named after the entity type (see entity_extract_ids()).
      'election_candidate' => array(
        'label' => t('Election candidate'),
        'admin' => array(
          'path' => 'admin/election/candidate',
          'access arguments' => array('administer elections'),
        ),
      ),
    ),
    'view modes' => array(
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'redirect' => FALSE, // for the Redirect module
  );

  return $entities;

}

/**
 * Implements hook_permission().
 */
function election_candidate_permission() {
  $permissions = array(
    'bypass nomination schedule' => array(
      'title' => t('Bypass nomination schedule'),
      'description' => t('This allows the user to submit a nomination at any time, regardless of whether or not nominations are open.'),
    ),
    'bypass nomination exclusivity' => array(
      'title' => t('Bypass nomination exclusivity'),
      'description' => t('This allows the user to submit a nomination for more than one exclusive position.'),
    ),
    'allow duplicate nominations' => array(
      'title' => t('Allow duplicate nominations'),
      'description' => t('This allows the user to submit more than one nomination for the same position.'),
    ),
    'submit nominations' => array(
      'title' => t('Submit nominations'),
      'description' => t('This allows the user to submit a nomination, only when nominations are open.'),
    ),
    'edit own nominations' => array(
      'title' => t('Edit own nominations'),
      'description' => t('This allows the user to edit his/her own nominations.'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to a given election candidate.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $candidate
 *   Optionally a candidate to check access for. If nothing is
 *   given, access for all candidates is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_candidate_access($op, $candidate = NULL, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }
  switch ($op) {
    case 'view':
      if (user_access('edit any election', $account)) {
        return TRUE;
      }
      if ($candidate && $candidate->cstatus == ELECTION_CANDIDATE_APPROVED && user_access('view any election', $account)) {
        return TRUE;
      }
      break;
    case 'edit':
    case 'update':
    case 'delete':
    case 'view details':
      if (user_access('edit any election', $account)) {
        return TRUE;
      }
      break;
    case 'create':
      // Creating must happen through the nomination form, not via entity_access.
      return FALSE;
      break;
  }
  if ($candidate === NULL || empty($candidate->uid) || $candidate->uid !== $account->uid) {
    // This is not the account's nomination, and global checks have failed.
    return FALSE;
  }
  // This is the $acccount's nomination.
  switch ($op) {
    case 'view':
    case 'view details':
      return TRUE;
      break;
    case 'edit':
    case 'update':
      return (bool) user_access('edit own nominations', $account);
      break;
    default:
      return FALSE;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function election_candidate_menu() {
  $items = array();

  $items['admin/election/candidate'] = array(
    'title' => 'Candidate settings',
    'description' => 'Manage fields and display settings for election candidates (not applicable to referendums).',
    'title callback' => 'check_plain',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
  );

  $items['admin/election/candidate/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/nomination-form'] = array(
    'title' => 'Nomination form',
    'page callback' => 'election_page_nomination_form',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('nomination', 1),
    'file' => 'election-candidate.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  $items['election/%election/candidates'] = array(
    'title' => 'Candidates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_list_form', 1),
    'access callback' => 'election_access',
    'access arguments' => array('edit candidates', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/candidates/list'] = array(
    'title' => 'List candidates',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/candidates/totals'] = array(
    'title' => 'View totals',
    'page callback' => 'election_candidate_totals_page',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('edit candidates', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/candidates/download'] = array(
    'title' => 'Download data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_download_form', 1),
    'access callback' => 'election_access',
    'access arguments' => array('edit candidates', 1),
    'file' => 'election-candidate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );


  $items['election/%election/candidate/%election_candidate'] = array(
    'title callback' => 'election_candidate_page_title',
    'title arguments' => array(1, 3),
    'page callback' => 'election_candidate_page_view',
    'page arguments' => array(1, 3),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
  );

  $items['election/%election/candidate/%election_candidate/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/candidate/%election_candidate/details'] = array(
    'title' => 'Details',
    'page callback' => 'election_candidate_details_page_view',
    'page arguments' => array(1, 3),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('view details', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election/%election/candidate/%election_candidate/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_edit_form', 1, 3),
    'file' => 'election-candidate.pages.inc',
    'access callback' => 'election_candidate_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  $items['election/%election/candidate/%election_candidate/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_candidate_edit_form_delete_confirm', 1, 3),
    'access callback' => 'election_candidate_access',
    'access arguments' => array('delete', 3),
    'file' => 'election-candidate.pages.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function election_candidate_menu_alter(&$items) {
  unset($items['admin/election/candidate/settings']);
  $items['admin/election/candidate/fields']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/fields']['description'] = t('Manage fields for election candidates.');
  $items['admin/election/candidate/display']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/display']['description'] = t('Manage display for election candidates.');
}

/**
 * Implements hook_field_extra_fields().
 */
function election_candidate_field_extra_fields() {
  $extra = array();
  $extra['election_candidate']['election_candidate'] = array(
    'form' => array(
      'post' => array(
        'label' => t('Post'),
        'description' => t('The post for this nomination.'),
        'weight' => -1,
      ),
      'first_name' => array(
        'label' => t('First name'),
        'description' => t('The candidate\'s first name(s).'),
        'weight' => 0,
      ),
      'last_name' => array(
        'label' => t('Last name'),
        'description' => t('The candidate\'s last name(s).'),
        'weight' => 1,
      ),
      'mail' => array(
        'label' => t('Email address'),
        'description' => t('The candidate\'s email address.'),
        'weight' => 2,
      ),
      'phone' => array(
        'label' => t('Phone number'),
        'description' => t('The candidate\'s phone number.'),
        'weight' => 3,
      ),
    ),
    'display' => array(
      'election' => array(
        'label' => t('Election'),
        'description' => t('The election for this nomination.'),
        'weight' => 0,
      ),
      'post' => array(
        'label' => t('Post'),
        'description' => t('The post/position for this nomination.'),
        'weight' => 1,
      ),
      'full-name' => array(
        'label' => t('Name'),
        'description' => t('The candidate\'s name.'),
        'weight' => 2,
      ),
    ),
  );
  return $extra;
}


/**
 * Title callback for election/%election_candidate/view (output should not be escaped here
 * as it is done later).
 *
 * @param stdClass $election
 * @param stdClass $candidate
 *
 * @return string
 */
function election_candidate_page_title($election, $candidate) {
  return $candidate->first_name . ' ' . $candidate->last_name;
}

/**
 * Wrapper function to allow saving an election candidate.
 *
 * @param stdClass $candidate
 *   Election candidate object.
 * @return bool
 */
function election_candidate_save($candidate) {
  return entity_get_controller('election_candidate')->save($candidate);
}

/**
 * Wrapper function to allow deleting multiple candidates.
 *
 * @param array $candidate_ids
 *   Array of candidate IDs.
 * @return bool
 */
function election_candidate_delete_multiple(array $candidate_ids) {
  return entity_get_controller('election_candidate')->delete($candidate_ids);
}

/**
 * Wrapper function to allow deleting an individual election.
 *
 * @see election_candidate_delete_multiple()
 *
 * @param mixed $candidate_id
 *   Single candidate ID.
 * @return bool
 */
function election_candidate_delete($candidate_id) {
  return election_candidate_delete_multiple(array($candidate_id));
}


/*
 * Find the nominations (election_candidate entities) for a specified election
 * and user.
 *
 * @param stdClass $election
 *   Election object.
 * @param stdClass $account
 *   Optional $user object.
 *
 * @return
 *   FALSE if the account is anonymous, or a SelectQuery object.
 */
function election_candidate_get_user_nominations(stdClass $election, $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }
  if ($account->uid == 0) {
    return array();
  }
  $select = db_query(
    'SELECT ec.*, ep.title AS post_title, ep.exclusive FROM {election_candidate} ec LEFT JOIN {election_post} ep USING (post_id) WHERE ec.uid = :uid AND ep.election_id = :eid',
    array(
      ':eid' => $election->election_id,
      ':uid' => $account->uid,
    )
  );
  return $select->fetchAll();
}

/*
 * Find the posts that a candidate may be nominated for.
 *
 * @param stdClass $election
 *   Election object.
 * @param array $nominations
 *   Array of the user's previous nominations (election_candidate objects).
 * @param stdClass $account
 *   User object.
 *
 * @return
 *   Array of post IDs.
 */
function election_candidate_get_available_posts(stdClass $election, $nominations = NULL, $account = NULL) {
  if ($nominations === NULL) {
    if ($account === NULL) {
      global $user;
      $account = $user;
    }
    $nominations = election_candidate_get_user_nominations($election, $account);
  }
  $has_exclusive = FALSE;
  $prev_post_ids = array();
  foreach ($nominations as $nomination) {
    if ($nomination->exclusive) {
      $has_exclusive = TRUE;
    }
    $prev_post_ids[] = $nomination->post_id;
  }
  $select = db_select('election_post', 'ep')->fields('ep', array('post_id'));
  $select->condition('election_id', $election->election_id, '=');
  if ($prev_post_ids && !user_access('allow duplicate nominations')) {
    $select->condition('post_id', $prev_post_ids, 'NOT IN');
  }
  if ($has_exclusive && !user_access('bypass nomination exclusivity')) {
    $select->condition('exclusive', 0, '=');
  }
  $select->orderBy('title');
  $result = $select->execute();
  return $result->fetchCol();
}

/**
 * URI callback for a single election candidate.
 *
 * @return array
 */
function election_candidate_uri($candidate) {
  $path = 'election-candidate/' . $candidate->candidate_id;
  if (!empty($candidate->election_id)) {
    $election = election_load($candidate->election_id);
    $path = election_uri_path($election) . '/candidate/' . $candidate->candidate_id;
  }
  return array(
    'path' => $path,
  );
}

/**
 * Return the path part of the election candidate URI callback as a string.
 *
 * @return string.
 */
function election_candidate_uri_path($candidate) {
  $uri = entity_uri('election_candidate', $candidate);
  return $uri['path'];
}

/**
 * Label callback for an election_candidate, returning the candidate's name.
 *
 * @param stdClass $entity
 * @param string $entity_type
 *
 * @return string
 */
function election_candidate_label(stdClass $entity, $entity_type) {
  return $entity->first_name . ' ' . $entity->last_name;
}

/**
 * Load multiple candidates.
 *
 * @param mixed $candidate_ids
 *   An array of election candidate IDs.
 *
 * @return stdClass
 *   A stdClass election_candidate object.
 */
function election_candidate_load_multiple(array $candidate_ids = array()) {
  return entity_load('election_candidate', $candidate_ids);
}
