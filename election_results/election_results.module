<?php
/**
 * @file
 * Main file for the Election Result module.
 */

/**
 * Implements hook_menu().
 */
function election_results_menu() {
  $items = array();
  $items['election-post/%election_post/results'] = array(
    'title' => 'Results',
    'page callback' => 'election_results_page',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['election-post/%election_post/results/download'] = array(
    'title' => 'Download BLT file of votes',
    'page callback' => '_election_results_download_blt',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('download', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function election_results_permission() {
  return array(
    'view any election results' => array(
      'title' => t('View any election results'),
      'description' => t('This allows the user to view the results of any elections.'),
    ),
    'view own election results' => array(
      'title' => t('View own election results'),
      'description' => t('This allows the user to view the results of their own elections (those to which they have editing access).'),
    ),
  );
}

/**
 * Access callback for viewing an election post's results.
 */
function election_results_access($op, stdClass $post, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $election = $post->election;
  switch ($op) {
    case 'view':
      if (empty($election->type_info['results page']) || !function_exists($election->type_info['results page'])) {
        return FALSE;
      }
      if (_election_post_is_open($post, NULL, 'v') && !user_access('bypass running election lock', $account)) {
        return FALSE;
      }
      if (election_post_access('edit', $post, $account) && user_access('view own election results', $account)) {
        return TRUE;
      }
      if (user_access('view any election results', $account)) {
        return TRUE;
      }
      return FALSE;
      break;

    case 'download':
      if (empty($election->type_info['results download form']) || !function_exists($election->type_info['results download form'])) {
        return FALSE;
      }
      if (_election_post_is_open($post, NULL, 'v') && !user_access('bypass running election lock', $account)) {
        return FALSE;
      }
      return election_post_access('edit', $post);
      break;

  }
  return FALSE;
}

/**
 * Implements hook_entity_load().
 */
function election_results_entity_load($entities, $type) {
  $ballot_counts = &drupal_static(__FUNCTION__, array());
  // Add 'ballot_count' property to posts.
  if ($type == 'election_post') {
    if (count(array_diff_key($entities, $ballot_counts))) {
      $ballot_counts = db_query(
        'SELECT post_id, COUNT(DISTINCT ballot_id) AS ballot_count FROM {election_ballot} WHERE post_id IN(:pids) GROUP BY post_id',
        array(':pids' => array_keys($entities))
      )->fetchAllAssoc('post_id');
    }
    foreach ($entities as $post_id => $post) {
      if (isset($ballot_counts[$post_id])) {
        $post->ballot_count = $ballot_counts[$post_id]->ballot_count;
      }
      else {
        $post->ballot_count = 0;
      }
    }
  }
}

/**
 * Page callback for election-post/%election_post/results.
 */
function election_results_page(stdClass $post) {

  $election = $post->election;

  $output = array();

  if (empty($post->ballot_count)) {
    return $output;
  }

  $totals = db_query(
    'SELECT COUNT(IF(abstain = 0, vote_id, NULL)) AS votes, COUNT(IF(abstain = 1, vote_id, NULL)) AS abstentions FROM {election_vote} WHERE post_id = :pid',
    array(
      ':pid' => $post->post_id,
    )
  )->fetch();

  if ($totals->votes == 0) {
    return $output;
  }

  $header = array(
    'ballots' => t('Ballots'),
    'votes' => t('Votes'),
    'abstentions' => t('Abstentions')
  );

  $rows = array();
  $rows[0] = array(
    'ballots' => number_format($post->ballot_count),
    'votes' => number_format($totals->votes),
    'abstentions' => number_format($totals->abstentions),
  );

  $output['totals'] = array(
    '#theme' => 'table',
    '#caption' => t('Totals'),
    '#header' => $header,
    '#rows' => $rows,
  );

  if (!empty($election->type_info['results page']) && function_exists($election->type_info['results page'])) {
    $function = $election->type_info['results page'];
    $output += $function($post, $totals);
  }

  return $output;

}

/**
 * Page callback for election-post/%election_post/results/download.
 */
function election_results_download(stdClass $post) {

  $election = $post->election;

  if (!empty($election->type_info['results download form']) && function_exists($election->type_info['results download form'])) {
    $form = $election->type_info['results download form'];
    return drupal_get_form($form, $post);
  }
  else {
    return MENU_NOT_FOUND;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the form at election/%election/posts.
 */
function election_results_form_election_post_manage_form_alter(&$form) {
  $election = $form['#election'];
  $posts = $form['#posts'];
  foreach ($form['election_posts']['#rows'] as $post_id => &$row) {
    $post = $posts[$post_id];
    $path = election_post_uri_path($post);
    // Add a 'results' link.
    if (election_results_access('view', $post)) {
      $row['operations']['data']['#items']['results'] = l(t('results'), $path . '/results');
    }
    // For STV elections, add a 'ballot file' link.
    if ($election->type == 'stv' && election_results_access('download', $post)) {
      $row['operations']['data']['#items']['results_blt'] = l(
        t('ballot file (@count)', array('@count' => format_plural($post->ballot_count, '1 ballot', '@count ballots'))),
        $path . '/results/blt'
      );
    }
  }
}

/**
 * The form for downloading STV election results.
 */
function election_results_download_form_stv($form, &$form_state, $post) {
}

/**
 * Download a ballot file.
 *
 * @param stdClass $post
 *   An election post object.
 */
function _election_results_download_blt($post) {

  set_time_limit(0);

  $start_time = microtime(TRUE);

  $post = election_post_load($post->post_id);

  $election = $post->election;

  if ($election->type != 'stv') {
    drupal_set_message(t('Results are only available for STV elections.'), 'warning');
    return;
  }

  $filename = 'Ballots_'. $election->election_id . '_' . $post->post_id . '_' . date('YmdHis') . '.blt';

  header('Content-Type:text/plain;charset=UTF-8');
  header('Content-Disposition:attachment;filename=' . $filename);
  header('Cache-Control:max-age=0; must-revalidate');

  $candidates = election_candidate_load_by_post($post, array(ELECTION_CANDIDATE_APPROVED, ELECTION_CANDIDATE_WITHDRAWN), FALSE);

  $candidate_map = array();
  $i = 1;
  $candidate_lines = '';
  $withdrawn = array();
  foreach ($candidates as $candidate) {
    $candidate_map[$candidate->candidate_id] = $i;
    if ($candidate->cstatus == ELECTION_CANDIDATE_WITHDRAWN) {
      $withdrawn[] = $i;
    }
    $name = addcslashes($candidate->first_name . ' ' . $candidate->last_name, '"');
    $candidate_lines .= "\"$name\" # Candidate keyed by $i\n";
    $i++;
  }
  if ($post->use_ron) {
    $candidate_map['ron'] = $i;
    $candidate_lines .= '"' . t('RON (Re-Open Nominations)') . '"' . " # Candidate keyed by $i\n";
  }

  $total_candidates = (int) count($candidates) + ($post->use_ron);
  $total_vacancies = (int) $post->vacancy_count;

  $votes_fields = array('ballot_id', 'candidate_id', 'ron', 'rank', 'abstain');

  $votes_query = db_select('election_vote', 'ev')
    ->fields('ev', $votes_fields)
    ->condition('ev.post_id', $post->post_id)
    ->orderBy('ballot_id')
    ->orderBy('rank');

  $votes = $votes_query->execute();

  $allow_equal = $post->allow_equal;
  $allow_abstention = $post->allow_abstention;

  $ballots = array();
  $ballot_errors = array();
  $last_rank = NULL;
  foreach ($votes as $vote) {

    $ballot_id = $vote->ballot_id;

    if (!isset($ballots[$ballot_id])) {
      $ballots[$ballot_id] = '';
      if ($vote->abstain) {
        if (!$allow_abstention) {
          $ballot_errors[$ballot_id] .= 'Abstention found, but abstention is not allowed!';
        }
        continue;
      }
    }
    elseif (isset($last_rank) && $last_rank === $vote->rank) {
      if (!$allow_equal) {
        $ballot_errors[$ballot_id] .= 'Equal ranking found, but equal ranking is not allowed!';
      }
      $ballots[$ballot_id] .= '=';
    }
    else {
      $ballots[$ballot_id] .= ' ';
    }
    $candidate_id = $vote->ron ? 'ron' : $vote->candidate_id;
    $ballots[$ballot_id] .= $candidate_map[$candidate_id];
    $last_rank = $vote->rank;
  }

  // --- START BALLOT FILE ---

  echo "################################################\n";

  echo '# ' . t('Ballot file generated on !date', array('!date' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'))) . " #\n";

  echo "################################################\n";

  echo '# ' . t('!candidates standing for !vacancies:',
    array(
      '!candidates' => format_plural($total_candidates, 'One candidate is', '@count candidates are'),
      '!vacancies' => format_plural($total_vacancies, 'one vacancy', '@count vacancies'),
    )
  ) . "\n";

  echo "$total_candidates $total_vacancies\n";

  if (!empty($withdrawn)) {
    echo '# ' . format_plural(
      count($withdrawn),
      "One candidate has withdrawn:",
      "@count candidates have withdrawn:"
    ) . "\n";
    echo '-' . implode(' -', $withdrawn) . "\n";
  }

  $anonymise = FALSE;

  echo "# Votes are below, each line is in the format:\n#    ";
  if (!$anonymise) {
    echo "[(BALLOT_ID)] ";
  }
  echo "MULTIPLIER [CANDIDATE CANDIDATE ...] 0\n";
  echo "# where candidates are represented by keys in order of preference.\n";
  echo "# Candidate keys are each separated by a space, or by = for equal rankings.\n";

  // Print the ballot lines.
  foreach ($ballots as $ballot_id => $ballot) {
    // If the ballot ID is omitted, the results will be anonymised.
    if (!$anonymise) {
      echo '(' . $ballot_id . ') ';
    }
    // Each line begins with a multiplier (always 1) and ends with 0.
    if (empty($ballot)) {
      // This is an abstention.
      echo '1 0';
    }
    else {
      echo '1 ' . $ballot . ' 0';
    }
    // Add any error messages for this ballot in a comment at the end.
    if (isset($ballot_errors[$ballot_id])) {
      echo '# ' . $ballot_errors[$ballot_id];
    }
    echo "\n";
  }

  echo "0 # This marks the end of ballots.\n";

  echo $candidate_lines;

  echo '"' . addcslashes($post->title, '"') . '" # Position title' . "\n";
  echo '"' . addcslashes($election->title, '"') . '" # Election title' . "\n";

  $time = microtime(TRUE) - $start_time;
  echo '# Time to generate file: ' . number_format($time * 1000, 2) . 'ms';

  drupal_exit();

}

/**
 * Page callback function for the referendum results counting page.
 */
function election_results_referendum_count_page(stdClass $post, $totals) {

  drupal_set_title(t('Count votes: %post', array('%post' => $post->title)), PASS_THROUGH);
  drupal_set_breadcrumb(_election_build_breadcrumb($post->election));

  $election = $post->election;

  $votes = db_query(
    'SELECT COUNT(IF(answer = :yes, vote_id, NULL)) AS yes, COUNT(IF(answer = :no, vote_id, NULL)) AS no FROM {election_vote} WHERE post_id = :pid AND abstain <> 1',
    array(
      ':pid' => $post->post_id,
      ':yes' => ELECTION_ANSWER_YES,
      ':no' => ELECTION_ANSWER_NO,
    )
  )->fetch();

  $header = array(
    t('Yes'),
    t('No'),
  );
  $rows = array(
    array(
      number_format($votes->yes) . ' (' . number_format(($votes->yes / $totals->votes) * 100, 2) . '%)',
      number_format($votes->no) . ' (' . number_format(($votes->no / $totals->votes) * 100, 2) . '%)',
    ),
  );

  $output['answers'] = array(
    '#theme' => 'table',
    '#caption' => t('Answers'),
    '#header' => $header,
    '#rows' => $rows,
  );

  return $output;

}

/**
 * Page callback function for the election results counting page.
 */
function election_results_stv_count_page(stdClass $post, $totals) {

  drupal_set_title(t('Count votes: %post', array('%post' => $post->title)), PASS_THROUGH);
  drupal_set_breadcrumb(_election_build_breadcrumb($post->election));

  $election = $post->election;

  $output = array();

  if (empty($post->ballot_count)) {
    return $output;
  }

  // For STV elections, use the DrooPHP library.
  if (!file_exists($droophp_path = libraries_get_path('DrooPHP'))) {
    drupal_set_message(t('The <a href="https://github.com/pjcdawkins/DrooPHP/" target="_blank">DrooPHP</a> library (required for counting votes in STV elections) is not installed.'), 'warning');
    return $output;
  }

  require_once $droophp_path . '/library.php';
  $count = new election_results_droophp_count($post);
  $options = array(
    'allow_equal' => $post->allow_equal,
  );
  $method = new DrooPHP_Method_Wikipedia($count, $options);
  $method->run();

  $output['results'] = array(
    '#markup' => '<p><i>DrooPHP - value of $method->stages:</i></p><pre>' . htmlspecialchars(print_r($method->stages, TRUE)) . '</pre>',
  );

  return $output;

}
