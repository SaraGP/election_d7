<?php
/**
 * @file
 * Election primary module file.
 */

require_once 'election.constants.inc';

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'uri callback' => 'election_uri',
    'controller class' => 'ElectionController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_types() as $type_mn => $type) {
    $entities['election']['bundles'][$type_mn] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/election/' . $type_mn,
        'bundle argument' => 2,
        'access arguments' => array('administer elections'),
      ),
    );
    if (property_exists($type, 'post key')) {
      $post_key = $type->{'post key'};
      $post_name = property_exists($type, 'post name')? $type->{'post name'} : drupal_ucfirst($post_key);
      $entities['election_post']['bundles'][$post_key] = array(
        'label' => $post_name,
        'admin' => array(
          'path' => 'admin/election/' . $type_mn . '/' . $post_key,
          'bundle argument' => 3,
          'access arguments' => array('administer elections'),
        ),
      );
    }
  }

  return $entities;

}

/**
 * Return information about election types in a structured array of stdClass
 * objects, keyed by each type's machine name.
 *
 * @return array
 */
function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types['referendum'] = (object) array(
      'name' => t('Referendum'),
      'description' => t('A simple referendum, where people can vote once (yes, no, or abstain) in response to a motion.'),
      'post name' => t('Motion'),
      'post name plural' => t('Motions'),
      'post key' => 'motion',
      'weight' => 0,
    );
    $types['stv'] = (object) array(
      'name' => t('STV Election'),
      'description' => t('A Single Transferable Vote election, conforming to the Electoral Reform Society\'s ERS97 standard.'),
      'post name' => t('Position'),
      'post name plural' => t('Positions'),
      'post key' => 'position',
      'weight' => 1,
    );
  }
  return $types;
}

/**
 * Implements hook_views_api().
 */
function election_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'election') . '/views',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function election_field_extra_fields() {
  $extra = array();
  foreach (election_types() as $type_mn => $type) {
    $extra['election'][$type_mn] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The title of the election.'),
          'weight' => -10,
        ),
        'status' => array(
          'label' => t('Voting status'),
          'description' => t('Whether voting is open, closed, or scheduled.'),
          'weight' => -3,
        ),
        'voting_schedule' => array(
          'label' => t('Voting schedule'),
          'description' => t('When users may vote.'),
          'weight' => -2,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'weight' => -10,
        ),
        'voting_schedule' => array(
          'label' => t('Voting schedule'),
          'weight' => -2,
        ),
      ),
    );
  }

  $extra['election_post']['position'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Position title'),
        'description' => t('The title of the position.'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('A short description of the position.'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => 0,
      ),
    ),
  );

  $extra['election_post']['motion'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Motion title'),
        'description' => t('The title of the motion.'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('A short description of the motion.'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Load an election type by its path.
 *
 * @param string $type_mn
 * The machine name of the type.
 * @return mixed
 * A stdClass election type object, or FALSE on failure.
 */
function _election_type_load($type_mn) {
  $types = election_types();
  if (isset($types[$type_mn])) {
    $type = $types[$type_mn];
  }
  else {
    $type = reset($types);
  }
  return $type;
}

/**
 * Get the title for a list of posts (adapt to the post type name).
 *
 * @param stdClass $election
 * Election object.
 *
 * @return string
 */
function _election_get_posts_title(stdClass $election) {
  $title = 'Posts';
  $type = _election_type_load($election->type);
  if (property_exists($type, 'post name plural')) {
    $title = $type->{'post name plural'};
  }
  elseif (property_exists($type, 'post name')) {
    $title = $type->{'post name'};
  }
  return $title;
}

/**
 * URI callback for a single election.
 *
 * @return array
 */
function election_uri($election) {
  $path = 'elections/' . $election->type . '/' . $election->election_id;
  return array(
    'path' => $path,
  );
}

/*
 * Return the path part of the election URI callback as a string.
 *
 * @return string
 */
function election_uri_path($election) {
  $uri = election_uri($election);
  return $uri['path'];
}

/**
 * URI callback for a single election post.
 *
 * @return array
 */
function election_post_uri($post) {
  $path = 'elections/posts/' . $post->post_id;
  if (!empty($post->election_id)) {
    $election = election_load($post->election_id);
    $path = election_uri_path($election) . '/posts/' . $post->post_id;
  }
  return array(
    'path' => $path,
  );
}

/**
 * Return the path part of the election post URI callback as a string.
 *
 * @return string.
 */
function election_post_uri_path($post) {
  $uri = election_post_uri($post);
  return $uri['path'];
}

/**
 * Load an individual election.
 *
 * @param mixed $election_id
 *   A single election ID.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load($election_id = NULL) {
  $result = entity_load('election', (array) $election_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple elections.
 *
 * @param mixed $election_id
 *   An array of election IDs.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load_multiple(array $election_ids = array()) {
  return entity_load('election', $election_ids);
}

/**
 * Load an individual election post.
 *
 * @param mixed $post_id
 *   A single election post ID.
 *
 * @return stdClass
 *   A stdClass post object.
 */
function election_post_load($post_id = NULL) {
  $result = entity_load('election_post', (array) $post_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple posts.
 *
 * @param mixed $post_ids
 *   An array of post IDs.
 *
 * @return stdClass
 *   A stdClass election post object.
 */
function election_post_load_multiple(array $post_ids = array()) {
  return entity_load('election_post', $post_ids);
}

/**
 * Implements hook_permission().
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Alter the fields and display settings for election types.'),
    ),
    'create elections' => array(
      'title' => t('Create elections'),
    ),
    'delete any elections' => array(
      'title' => t('Delete any election'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes all associated data (including votes).'),
      'restrict access' => TRUE,
    ),
    'edit any election' => array(
      'title' => t('Edit any election'),
    ),
    'view any election' => array(
      'title' => t('View any election'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally an election or an election type to check access for. If nothing is
 *   given, access for all elections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return (bool) user_access('view any election', $account);
      break;
    case 'create':
      return (bool) user_access('create elections', $account);
      break;
    case 'update':
    case 'edit':
      return (bool) user_access('edit any election', $account);
      break;
    case 'delete':
      return (bool) user_access('delete any election', $account);
      break;
  }
  return FALSE;
}

/**
 *
 */

/**
 * Implements hook_menu().
 */
function election_menu() {

  $items = array();

  $items['admin/election'] = array(
    'title' => 'Elections',
    'description' => 'Administer elections and referendums.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
    'weight' => 1,
  );

  $items['admin/election/list'] = array(
    'title' => 'Election list',
    'title callback' => 'check_plain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_list'),
    'access arguments' => array('administer elections'),
    'file' => 'election.admin.inc',
    'description' => 'View, edit, and add new elections.',
    'weight' => -10,
  );

  foreach (election_types() as $type_mn => $type) {
    $items['admin/election/list/add/' . $type_mn] = array(
      'title' => 'Add new ' . $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'election_page_add',
      'page arguments' => array(4),
      'access arguments' => array('administer elections'),
      'file' => 'election.admin.inc',
      'description' => $type->description,
      'type' => MENU_LOCAL_ACTION,
      'weight' => isset($type->weight)? $type->weight : 0,
    );
    $items['admin/election/' . $type_mn] = array(
      'title' => $type->name . ' settings',
      'title callback' => 'check_plain',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => $type->description,
      'weight' => isset($type->weight)? $type->weight : 0,
    );
    if (property_exists($type, 'post key')) {
      $post_key = $type->{'post key'};
      $post_name = property_exists($type, 'post name')? $type->{'post name'} : drupal_ucfirst($post_key);
      $items['admin/election/' . $type_mn . '/' . $post_key] = array(
        'title' => $post_name . ' settings',
        'title callback' => 'check_plain',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer elections'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'description' => 'Manage fields and display settings for the post type "' . $post_name . '".',
      );
    }
  }

  $items['elections/%/%election'] = array(
    'title callback' => 'election_page_title',
    'title arguments' => array(2),
    'page callback' => 'election_page_view',
    'page arguments' => array(2),
    'access callback' => 'election_access',
    'access arguments' => array('view', 2),
    'file' => 'election.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['elections/%/%election/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['elections/%/%election/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_page_edit',
    'file' => 'election.admin.inc',
    'page arguments' => array(2),
    'access callback' => 'election_access',
    'access arguments' => array('update', 2),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['elections/%/%election/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_delete_confirm', 2),
    'access callback' => 'election_access',
    'access arguments' => array('delete', 2),
    'file' => 'election.admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['elections/%/%election/posts'] = array(
    'title callback' => 'election_page_postlist_title',
    'title arguments' => array(2),
    'page callback' => 'election_page_postlist',
    'page arguments' => array(2),
    'file' => 'election.pages.inc',
    'access callback' => 'election_access',
    'access arguments' => array('view', 2),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );


  $items['elections/%/%election/posts/add'] = array(
    'title' => 'Add new',
    'page callback' => 'election_post_page_add',
    'page arguments' => array(2),
    'access callback' => 'election_access',
    'access arguments' => array('update', 2),
    'file' => 'election.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['elections/%/%election/posts/%election_post'] = array(
    'title callback' => 'election_post_page_title',
    'title arguments' => array(2, 4),
    'page callback' => 'election_post_page',
    'page arguments' => array(2, 4),
    'file' => 'election.pages.inc',
    'access callback' => 'election_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );

  $items['elections/%/%election/posts/%election_post/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['elections/%/%election/posts/%election_post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_post_page_edit',
    'page arguments' => array(2, 4),
    'file' => 'election.admin.inc',
    'access callback' => 'election_access',
    'access arguments' => array('update', 2),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_menu_alter(&$items) {
  foreach (election_types() as $type_mn => $type) {
    $path = 'admin/election/' . $type_mn;
    unset($items[$path . '/settings']);
    $items[$path . '/fields']['weight'] = -2;
    $items[$path . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/fields']['description'] = t(
      'Manage fields for the election type "!type".',
      array('!type' => $type->name)
    );
    $items[$path . '/display']['weight'] = -1;
    $items[$path . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display']['description'] = t(
      'Manage display for the election type "!type".',
      array('!type' => $type->name)
    );

    if (property_exists($type, 'post key')) {
      $post_key = $type->{'post key'};
      $post_name = property_exists($type, 'post name')? $type->{'post name'} : drupal_ucfirst($post_key);
      $items[$path . '/' . $post_key . '/fields']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/fields']['description'] = t(
        'Manage fields for the post type "!type".',
        array('!type' => $post_name)
      );
      $items[$path . '/' . $post_key . '/display']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/display']['description'] = t(
        'Manage display for the post type "!type".',
        array('!type' => $post_name)
      );
    }

  }
}


function election_delete_multiple(array $election_ids) {
  return entity_get_controller('election')->delete($election_ids);
}

function election_delete($election_id) {
  return election_delete_multiple(array($election_id));
}

function election_save($election) {
  return entity_get_controller('election')->save($election);
}


function election_post_save($post) {
  return entity_get_controller('election_post')->save($post);
}

/**
 * Title callback for elections/%/%election/posts.
 */
function election_page_postlist_title($election) {
  return _election_get_posts_title($election);
}

/**
 * Title callback for elections/%/%election/posts/%election_post.
 */
function election_post_page_title($election, $post) {
  return $post->title . ' (' . $election->title . ')';
}

/**
 * Title callback for elections/%/%election/view.
 */
function election_page_title($election) {
  return check_plain($election->title);
}

/**
 * General function for creating breadcrumbs.
 */
function _election_build_breadcrumb(stdClass $election = NULL) {

  $args = func_get_args();

  $links = array();
  $links[] = l(
    t('Home'),
    '<front>'
  );
  $links[] = l(
    'Elections',
    'elections'
  );

  if (!is_object($election)) {
    return $links;
  }

  $election_uri_path = election_uri_path($election);

  $links[] = l(
    $election->title,
    election_uri_path($election)
  );

  $type = _election_type_load($election->type);
  $post_name_plural = $type->{'post key'};
  if (!empty($type->{'post name plural'})) {
    $post_name_plural = $type->{'post name plural'};
  }

  unset($args[0]);
  foreach ($args as $arg) {

    $link = $arg;
    switch ($arg) {
      case 'Posts':
        $link = l($post_name_plural, $election_uri_path . '/posts');
        break;
    }

    $links[] = $link;

  }

  return $links;
}