<?php
/**
 * @file
 * Primary module file for the election_referendum module.
 */

/**
 * Implements template_preprocess_election().
 */
function election_referendum_preprocess_election(&$vars) {
  $election = $vars['election'];
  $posts_name = election_get_post_name($election->type, TRUE);
  if ($election->type == 'referendum') {
    $vars['content']['posts'] = array(
      '#markup' => '<div class="election-posts"><h2>' . drupal_ucfirst(check_plain($posts_name)) . '</h2>'
      . views_embed_view('election_posts', 'block_referendum', $election->election_id)
      . '</div>',
      '#weight' => 100,
    );
  }
}

/**
 * Implements template_preprocess_election_post().
 */
function election_referendum_preprocess_election_post(&$vars) {
  if ($vars['election']->type == 'referendum' && isset($vars['content']['election'])) {
    $vars['content']['election']['#title'] = t('In referendum');
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function election_referendum_views_default_views_alter(&$views) {
  if (isset($views['election_posts'])) {
    $view = $views['election_posts'];
    if (!isset($view->display['block_referendum'])) {
      require_once 'block_referendum_view_display.inc';
    }
  }
}

/**
 * Preprocess function for the voting confirmation page.
 */
function election_referendum_preprocess_election_vote_confirm(&$variables) {

  $form_state = $variables['form_state'];
  $election = $form_state['election'];
  $post = $form_state['post'];

  if ($election->type == 'referendum') {

    $answer = $form_state['values']['answer'];

    $variables['confirm'] = array(
      array(
        '#type' => 'item',
        '#title' => drupal_ucfirst(election_get_post_name('referendum')),
        '#markup' => check_plain($post->title),
      ),
      array(
        '#type' => 'item',
        '#title' => t('Your answer'),
        '#markup' => drupal_placeholder(
          _election_referendum_get_answer_text($post, $answer)
        ),
      ),
    );

  }

}

/**
 * Page callback function for the referendum results counting page.
 */
function election_referendum_count_page(stdClass $post, $totals) {

  $election = $post->election;

  $votes = db_query(
    'SELECT COUNT(IF(answer = :yes, vote_id, NULL)) AS yes, COUNT(IF(answer = :no, vote_id, NULL)) AS no FROM {election_vote} WHERE post_id = :pid AND abstain <> 1',
    array(
      ':pid' => $post->post_id,
      ':yes' => ELECTION_ANSWER_YES,
      ':no' => ELECTION_ANSWER_NO,
    )
  )->fetch();

  $header = array(
    check_plain(_election_referendum_get_answer_text($post, ELECTION_ANSWER_YES)),
    check_plain(_election_referendum_get_answer_text($post, ELECTION_ANSWER_NO)),
  );

  $percentage_yes = $totals->votes == 0 ? 0 : ($votes->yes / $totals->votes) * 100;
  $percentage_no = $totals->votes == 0 ? 0 : ($votes->no / $totals->votes) * 100;

  $rows = array(
    array(
      number_format($votes->yes) . ' (' . number_format($percentage_yes, 2) . '% of votes)',
      number_format($votes->no) . ' (' . number_format($percentage_no, 2) . '% of votes)',
    ),
  );

  $output['answers'] = array(
    '#theme' => 'table',
    '#caption' => t('Answers'),
    '#header' => $header,
    '#rows' => $rows,
  );

  return $output;

}

/**
 * Form modifying function - voting form (election-post/%election_post/vote).
 */
function election_referendum_vote_form($form, &$form_state, $post, $election) {

  $form['post_preview'] = array(
    '#type' => 'item',
    '#title' => drupal_ucfirst(election_get_post_name($election->type)),
    '#markup' => t('@post (<a href="@post_url">view details</a>)', array(
      '@post' => $post->title,
      '@post_url' => url(election_post_uri_path($post)),
    )),
  );

  $form['answer'] = array(
    '#type' => 'radios',
    '#title' => t('Your answer'),
    '#options' => array(
      ELECTION_ANSWER_YES => check_plain(
        _election_referendum_get_answer_text($post, ELECTION_ANSWER_YES)
      ),
      ELECTION_ANSWER_NO => check_plain(
        _election_referendum_get_answer_text($post, ELECTION_ANSWER_NO)
      ),
    ),
    '#required' => TRUE,
  );

  $form['#validate'][] = 'election_referendum_vote_form_validate';

  return $form;

}

/**
 * Validate the voting form.
 */
function election_referendum_vote_form_validate($form, &$form_state) {

  // Add 'answer' to $form_state (so it's available for later).
  $form_state['answer'] = $form_state['values']['answer'];

}

/**
 * Save answer to a question in a referendum.
 */
function election_referendum_save_votes($form, &$form_state, $post, $ballot_id) {

  $vote = array(
    'election_id' => $post->election_id,
    'ballot_id' => $ballot_id,
    'post_id' => $post->post_id,
    'answer' => $form_state['answer'],
  );

  db_insert('election_vote')
    ->fields($vote)
    ->execute();

  return TRUE;

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add referendum-specific settings to the election_post edit form.
 */
function election_referendum_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $form_state['election'];
  if ($election->type != 'referendum') {
    return;
  }

  $form['title']['#title'] = t('Question');

  $form['answers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Answers'),
    '#description' => t('Define the valid positive and negative answers to this @post (e.g. Yes/No, Agree/Disagree, etc.).',
      array('@post' => election_get_post_name($election->type))),
    '#weight' => -30,
    '#collapsible' => TRUE,
  );
  $form['answers']['settings_answer_pos'] = array(
    '#type' => 'textfield',
    '#title' => t('Positive answer'),
    '#default_value' => _election_referendum_get_answer_text($post, ELECTION_ANSWER_YES),
    '#maxlength' => 10,
    '#size' => 10,
  );
  $form['answers']['settings_answer_neg'] = array(
    '#type' => 'textfield',
    '#title' => t('Negative answer'),
    '#default_value' => _election_referendum_get_answer_text($post, ELECTION_ANSWER_NO),
    '#maxlength' => 10,
    '#size' => 10,
  );
  $form['#validate'][] = 'election_referendum_settings_validate';
}

/**
 * Form validate function for the referendum post settings.
 *
 * @see election_referendum_form_election_post_form_alter()
 */
function election_referendum_settings_validate($form, &$form_state) {
  if ($form_state['values']['settings_answer_pos'] == $form_state['values']['settings_answer_neg']) {
    form_set_error('answers', t('The positive and negative answers cannot be the same.'));
  }
}

/**
 * Extract the answer text (Yes/No, Agree/Disagree etc.) for a referendum post.
 */
function _election_referendum_get_answer_text($post, $answer) {
  switch ($answer) {
    case ELECTION_ANSWER_YES:
      if (!empty($post->settings['answer_pos'])) {
        return $post->settings['answer_pos'];
      }
      return t('Yes');
      break;

    case ELECTION_ANSWER_NO:
      if (!empty($post->settings['answer_neg'])) {
        return $post->settings['answer_neg'];
      }
      return t('No');
      break;

  }
}
