<?php
/**
 * @file
 * Election Electorate: primary module file.
 *
 * @todo hook into voting permission.
 */

/**
 * Return information about all electorates.
 *
 * @todo document this
 *
 * @return array
 */
function election_electorate_electorates($post = NULL) {
  $query = db_select('election_electorate', 'ee');
  $query->fields('ee');
  if (is_object($post)) {
    $query->leftJoin('election_post_electorate', 'epe', 'ee.post_id=epe.post_id');
    $query->condition('epe.post_id', $post->post_id);
  }
  $query->orderBy('ee.name');
  $result = $query->execute();

  $electorates = array();

  $code_electorates = _election_electorate_get_code_electorates();

  while ($electorate = $result->fetchAssoc()) {
    $key = $electorate['machine_name'];
    if ($electorate['locked']) {
      if (isset($code_electorates[$key])) {
        $electorate['conditions'] = (array) @$code_electorates[$key]['conditions'];
      }
    }
    else {
      // @todo this is envisioned to allow conditions to be configured dynamically.
      // @todo look into ctools exportables.
      $electorate['conditions'] = (array) unserialize($electorate['conditions']);
    }
    $key = $electorate['machine_name'];
    $electorates[$key] = $electorate;
  }

  return $electorates;
}

/**
 * Return information about code electorates in a structured array, keyed by each
 * electorate's machine name. Each element is also a structured array defining at
 * least 'name' and 'access callback'. The key 'access callback' refers to a
 * function that takes one argument (the Drupal $user object) and returns
 * whether or not the user is part of the electorate (as a Boolean value).
 *
 * This function uses hook_electorate_info() to allow other modules to
 * define electorates.
 *
 * @return array
 */
function _election_electorate_get_code_electorates() {
  $electorates = &drupal_static(__FUNCTION__);
  if (empty($electorates)) {
    $electorates = array();
    $electorates += module_invoke_all('electorate_info');
  }
  return $electorates;
}

/**
 * Implements hook_modules_enabled().
 */
function election_electorate_modules_enabled($modules = array()) {
  /*
    If any of the enabled modules contains an implementation of
    hook_electorate_info, run _election_electorate_install_code_electorates().
  */
  foreach ($modules as $module) {
    if (function_exists($module . '_electorate_info')) {
      _election_electorate_install_code_electorates();
      break;
    }
  }
}

/**
 * Implements hook_modules_disabled().
 */
function election_electorate_modules_disabled($modules = array()) {
  /*
    If any of the disabled modules contains an implementation of
    hook_electorate_info, run _election_electorate_uninstall_code_electorates().
  */
  foreach ($modules as $module) {
    if (function_exists($module . '_electorate_info')) {
      _election_electorate_uninstall_code_electorates();
      break;
    }
  }
}

/*
 * Delete electorates from the DB only if they are not assigned to any posts AND
 * they do not (or no longer) exist in code.
 *
 * @return void
 */
function _election_electorate_uninstall_code_electorates() {
  $code_electorates = _election_electorate_get_code_electorates();
  $transaction = db_transaction();
  try {
    $db_electorates = db_query('SELECT electorate_id, machine_name FROM {election_electorate} WHERE locked = 1');
    while ($db_electorate = $db_electorates->fetchAssoc()) {
      // Don't delete electorates that (still) exist in code.
      if (isset($code_electorates[$db_electorate['machine_name']])) {
        continue;
      }
      // Don't delete assigned electorates.
      $assigned = db_query_range(
        'SELECT 1 FROM {election_post_electorate} WHERE electorate_id = :eid',
        0, 1,
        array(':eid' => $db_electorate['electorate_id'])
      );
      if ($assigned->rowCount()) {
        continue;
      }
      db_delete('election_electorate')
        ->condition('electorate_id', $db_electorate['electorate_id'])
        ->execute();
      watchdog(
        'election',
        'Deleted the electorate %machine_name from the database as it is no longer in use.',
        array('%machine_name' => $db_electorate['machine_name'])
      );
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception(
      'election',
      $e,
      'Failed to remove from the database those electorates that no longer exist in code.',
      WATCHDOG_ERROR
    );
    return FALSE;
  }
}

/**
 * Find electorates in code and write them (identified by 'machine name') to the
 * {election_electorate} table. This uses a Merge Query, see:
 * http://drupal.org/node/310085
 * and:
 * http://api.drupal.org/api/drupal/includes--database--query.inc/class/MergeQuery/7
 *
 * @return void
 */
function _election_electorate_install_code_electorates() {
  foreach (_election_electorate_get_code_electorates() as $electorate_mn => $electorate) {
    $record = array(
      'machine_name' => $electorate_mn,
      'name' => empty($electorate['name'])? $electorate_mn : $electorate['name'],
      'description' => @$electorate['description'],
      'locked' => 1,
      'changed' => REQUEST_TIME,
    );
    db_merge('election_electorate')
      ->key(array('machine_name' => $electorate_mn))
      ->updateFields($record)
      ->insertFields($record + array('created' => REQUEST_TIME))
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function election_electorate_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $form_state['election'];

  $post->electorates = array();
  if (!$post->is_new) {
    $result = db_query('SELECT electorate_id FROM {election_post_electorate} WHERE post_id = :pid', array(':pid' => $post->post_id));
    while ($row = $result->fetchAssoc()) {
      $post->electorates[$row['electorate_id']] = 1;
    }
  }
  $form['conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conditional voting'),
    '#collapsible' => TRUE,
    '#collapsed' => (empty($post->electorates)),
    '#weight' => 99,
  );
  $form['conditions']['help'] = array(
    'title' => array(
      '#prefix' => '<div class="form-item"><label for="edit-electorates">',
      '#markup' => t('Assign electorates'),
      '#suffix' => '</label>',
    ),
    'help' => array(
      '#prefix' => '<p class="voting-conditions-help">',
      '#markup' => t('A user may cast a vote for this @post_type_name if he/she is a member of ANY of the electorates assigned here.', array('@post_type_name' => _election_get_posts_name($election->type))),
      '#suffix' => '</p></div>',
    ),
  );
  $electorate_headers = array(
    'name' => t('Name'),
    'conditions' => t('Conditions'),
    'description' => t('Description'),
  );
  $electorate_options = array();
  foreach (election_electorate_electorates() as $electorate_mn => $electorate) {
    if (!is_array($electorate['conditions']) || !count($electorate['conditions'])) {
      $conditions = '<span class="error">'
                  . t('No valid conditions found for the electorate %machine_name.',
                      array('%machine_name' => $electorate_mn))
                  . '</span>';
    }
    else {
      $items = $electorate['conditions'];
      foreach ($items as $key => $item) {
        $items[$key] = t('@key: %item', array(
          '@key' => is_string($key)? drupal_ucfirst($key) : 'Function',
          '%item' => $item . '()',
        ));
      }
      $conditions = theme('item_list', array('#items' => $items));
    }
    $electorate_options[$electorate['electorate_id']] = array(
      'name' => $electorate['name'],
      'conditions' => $conditions,
      'description' => $electorate['description'],
    );
  }
  $form['conditions']['electorates'] = array(
    '#type' => 'tableselect',
    '#attributes' => array('class', 'select-electorates'),
    '#default_value' => isset($post->electorates)? (array) $post->electorates : array(),
    '#header' => $electorate_headers,
    '#options' => $electorate_options,
    '#multiple' => TRUE,
    '#js_select' => FALSE,
    '#empty' => t('No electorates available.'),
  );

  $form['buttons']['submit']['#submit'][] = 'election_electorate_election_post_form_submit';

}

/**
 * Additional submit callback for the Submit button on the form election_post_form.
 *
 * @see election_post_form()
 */
function election_electorate_election_post_form_submit($form, &$form_state) {

  $post = $form_state['post'];

  $transaction = db_transaction();
  try {
    $electorate_ids = array();
    foreach ($form_state['values']['electorates'] as $electorate_id => $value) {
      if (!empty($value)) {
        $electorate_ids[] = $electorate_id;
      }
    }
    db_delete('election_post_electorate')
      ->condition('post_id', $post->post_id)
      ->execute();
    foreach ($electorate_ids as $electorate_id) {
      db_insert('election_post_electorate')->fields(array(
        'post_id' => $post->post_id,
        'electorate_id' => $electorate_id,
      ))->execute();
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('election', $e, NULL, WATCHDOG_ERROR);
  }

}
