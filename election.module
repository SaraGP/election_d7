<?php
/**
 * @file
 * Election primary module file.
 */

require_once 'election.constants.inc';

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'uri callback' => 'election_uri',
    'controller class' => 'ElectionController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  foreach (election_types() as $type_mn => $type) {
    $entities['election']['bundles'][$type_mn] = array(
      'label' => drupal_ucfirst($type['name']),
      'admin' => array(
        'path' => 'admin/election/' . $type_mn,
        'bundle argument' => 2,
        'access arguments' => array('administer elections'),
      ),
    );
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name = _election_get_posts_name($type_mn);
      $entities['election_post']['bundles'][$post_key] = array(
        'label' => drupal_ucfirst($post_name),
        'admin' => array(
          'path' => 'admin/election/' . $type_mn . '/' . $post_key,
          'bundle argument' => 3,
          'access arguments' => array('administer elections'),
        ),
      );
    }
  }

  $entities['election_candidate'] = array(
    'label' => t('Election candidate'),
    'uri callback' => 'election_candidate_uri',
    'controller class' => 'ElectionCandidateController',
    'base table' => 'election_candidate',
    'label callback' => 'election_candidate_label',
    'entity keys' => array('id' => 'candidate_id', 'bundle' => 'type'),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'summary' => array(
        'label' => t('Summary information'),
        'custom settings' => TRUE,
      ),
    ),
    'bundles' => array(
      'candidate' => array(
        'label' => t('Election candidate'),
        'admin' => array(
          'path' => 'admin/election/candidate',
          'access arguments' => array('administer elections'),
        ),
      ),
    ),
  );

  return $entities;

}

/**
 * Return information about election types in a structured array, keyed by
 * each type's machine name. Each element is also a structured array defining at
 * least 'name' and 'post key'.
 *
 * This uses hook_election_type_info() to allow other modules to define types.
 *
 * @return array
 */
function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $types = array();
    $types['referendum'] = array(
      'name' => t('referendum'),
      'description' => t('A simple referendum, where people can vote once (yes, no, or abstain) in response to a motion.'),
      'post name' => t('motion'),
      'post name plural' => t('motions'),
      'post key' => 'motion',
      'weight' => 0,
    );
    $types['stv'] = array(
      'name' => t('STV election'),
      'description' => t('A Single Transferable Vote election, conforming to the Electoral Reform Society\'s ERS97 standard.'),
      'post name' => t('position'),
      'post name plural' => t('positions'),
      'post key' => 'position',
      'weight' => 1,
    );
    $types += module_invoke_all('election_type_info');
  }
  return $types;
}

/**
 * Implements hook_views_api().
 */
function election_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'election') . '/views',
  );
}

/**
 * Implements entity_uri(). URI callback for a single election. See:
 * http://api.drupal.org/api/drupal/includes--common.inc/function/entity_uri/7.
 *
 * @return array
 */
function election_uri($election) {
  $path = 'election/' . $election->election_id;
  return array(
    'path' => $path,
  );
}

/*
 * Return the path part of the election URI callback as a string.
 *
 * The implementation of this function throughout the module is debatable, see:
 * http://drupal.org/node/823428.
 *
 * @see election_uri()
 *
 * @return string
 */
function election_uri_path($election) {
  $uri = entity_uri('election', $election);
  return $uri['path'];
}

/**
 * URI callback for a single election post.
 *
 * @return array
 */
function election_post_uri($post) {
  $path = 'election-posts/' . $post->post_id;
  if (!empty($post->election_id)) {
    $election = election_load($post->election_id);
    $path = election_uri_path($election) . '/posts/' . $post->post_id;
  }
  return array(
    'path' => $path,
  );
}

/**
 * Return the path part of the election post URI callback as a string.
 *
 * @return string.
 */
function election_post_uri_path($post) {
  $uri = entity_uri('election_post', $post);
  return $uri['path'];
}

/**
 * URI callback for a single election candidate.
 *
 * @return array
 */
function election_candidate_uri($candidate) {
  $path = 'election-candidates/' . $candidate->candidate_id;
  if (!empty($candidate->post_id)) {
    $post = election_post_load($candidate->post_id);
    $path = election_post_uri_path($post) . '/candidates/' . $candidate->candidate_id;
  }
  return array(
    'path' => $path,
  );
}

/**
 * Return the path part of the election candidate URI callback as a string.
 *
 * @return string.
 */
function election_candidate_uri_path($candidate) {
  $uri = entity_uri('election_candidate', $candidate);
  return $uri['path'];
}

/**
 * Label callback for an election_candidate, returning the candidate's name.
 *
 * @param stdClass $entity
 * @param string $entity_type
 *
 * @return string
 */
function election_candidate_label(stdClass $entity, $entity_type) {
  if ($entity_type == 'election_candidate' && !empty($entity->uid)) {
    $account = user_load($entity->uid);
    if ($items = field_get_items('user', $account, 'name')) {
      foreach ($items as $item) {
        if (!empty($item['name'])) {
          return $item['name'];
        }
      }
    }
    return t('No name found.');
  }
}

/**
 * Load an individual election.
 *
 * @param mixed $election_id
 *   A single election ID.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load($election_id = NULL) {
  $result = entity_load('election', (array) $election_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Return information about all electorates.
 *
 * @todo document this
 *
 * @return array
 */
function election_electorates() {
  $result = db_query('SELECT * FROM {election_electorate} ORDER BY name');

  $electorates = array();

  $code_electorates = _election_get_code_electorates();

  while ($electorate = $result->fetchAssoc()) {
    $key = $electorate['machine_name'];
    if ($electorate['locked']) {
      if (isset($code_electorates[$key])) {
        $electorate['conditions'] = (array) @$code_electorates[$key]['conditions'];
      }
    }
    else {
      $electorate['conditions'] = (array) unserialize($electorate['conditions']);
    }
    $key = $electorate['machine_name'];
    $electorates[$key] = $electorate;
  }

  return $electorates;
}

/**
 * Return information about code electorates in a structured array, keyed by each
 * electorate's machine name. Each element is also a structured array defining at
 * least 'name' and 'access callback'. The key 'access callback' refers to a
 * function that takes one argument (the Drupal $user object) and returns
 * whether or not the user is part of the electorate (as a Boolean value).
 *
 * This function uses hook_electorate_info() to allow other modules to
 * define electorates.
 *
 * @return array
 */
function _election_get_code_electorates() {
  $electorates = &drupal_static(__FUNCTION__);
  if (empty($electorates)) {
    $electorates = array();
    $electorates += module_invoke_all('electorate_info');
  }
  return $electorates;
}

/**
 * Implements hook_modules_enabled().
 */
function election_modules_enabled($modules = array()) {
  /*
    If any of the enabled modules contains an implementation of
    hook_electorate_info, run _election_install_code_electorates().
  */
  foreach ($modules as $module) {
    if (function_exists($module . '_electorate_info')) {
      _election_install_code_electorates();
      break;
    }
  }
}

/**
 * Implements hook_modules_disabled().
 */
function election_modules_disabled($modules = array()) {
  /*
    If any of the disabled modules contains an implementation of
    hook_electorate_info, run _election_uninstall_code_electorates().
  */
  foreach ($modules as $module) {
    if (function_exists($module . '_electorate_info')) {
      _election_uninstall_code_electorates();
      break;
    }
  }
}

/*
 * Delete electorates from the DB only if they don't exist in
 * election_post_electorate AND they don't exist in code.
 *
 * @return void
 */
function _election_uninstall_code_electorates() {
  $code_electorates = _election_get_code_electorates();
  $transaction = db_transaction();
  try {
    $db_electorates = db_query('SELECT electorate_id, machine_name FROM {election_electorate} WHERE locked = 1');
    while ($db_electorate = $db_electorates->fetchAssoc()) {
      if (isset($code_electorates[$db_electorate['machine_name']])) {
        continue;
      }
      $assigned = db_query('SELECT 1 FROM {election_post_electorate} WHERE electorate_id = :eid LIMIT 1', array(':eid', $db_electorate['electorate_id']));
      if ($assigned->rowCount()) {
        continue;
      }
      db_delete('election_electorate')
        ->condition('electorate_id', $db_electorate['electorate_id'])
        ->execute();
      watchdog(
        'election',
        'Deleted the electorate %machine_name from the database as it is no longer in use.',
        array('%machine_name' => $db_electorate['machine_name'])
      );
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('election', $e, NULL, WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Find electorates in code and write them (identified by 'machine name') to the
 * {election_electorate} table. This uses a Merge Query, see:
 * http://drupal.org/node/310085
 * and:
 * http://api.drupal.org/api/drupal/includes--database--query.inc/class/MergeQuery/7
 *
 * @return void
 */
function _election_install_code_electorates() {
  foreach (_election_get_code_electorates() as $electorate_mn => $electorate) {
    $record = array(
      'machine_name' => $electorate_mn,
      'name' => empty($electorate['name'])? $electorate_mn : $electorate['name'],
      'description' => @$electorate['description'],
      'locked' => 1,
      'changed' => REQUEST_TIME,
    );
    db_merge('election_electorate')
      ->key(array('machine_name' => $electorate_mn))
      ->updateFields($record)
      ->insertFields($record + array('created' => REQUEST_TIME))
      ->execute();
  }
}


/**
 * Load multiple elections.
 *
 * @param mixed $election_id
 *   An array of election IDs.
 *
 * @return stdClass
 *   A stdClass election object.
 */
function election_load_multiple(array $election_ids = array()) {
  return entity_load('election', $election_ids);
}

/**
 * Load an individual election post.
 *
 * @param mixed $post_id
 *   A single election post ID.
 *
 * @return stdClass
 *   A stdClass post object.
 */
function election_post_load($post_id = NULL) {
  $result = entity_load('election_post', (array) $post_id);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple posts.
 *
 * @param mixed $post_ids
 *   An array of post IDs.
 *
 * @return stdClass
 *   A stdClass election post object.
 */
function election_post_load_multiple(array $post_ids = array()) {
  return entity_load('election_post', $post_ids);
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Alter the fields and display settings for election types.'),
    ),
    'create elections' => array(
      'title' => t('Create elections'),
    ),
    'delete any elections' => array(
      'title' => t('Delete any election'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes ALL associated data, for example votes.'),
      'restrict access' => TRUE,
    ),
    'edit any election' => array(
      'title' => t('Edit any election'),
    ),
    'view any election' => array(
      'title' => t('View any election'),
    ),
    'vote in elections' => array(
      'title' => t('Vote in elections'),
      'description' => t('Users must have this permission in order to vote. They must also belong to the relevant electorate(s).'),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $election
 *   Optionally an election or an election type to check access for. If nothing is
 *   given, access for all elections is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return (bool) user_access('view any election', $account);
      break;
    case 'create':
      return (bool) user_access('create elections', $account);
      break;
    case 'update':
    case 'edit':
      return (bool) user_access('edit any election', $account);
      break;
    case 'delete':
      return (bool) user_access('delete any election', $account);
      break;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function election_menu() {

  $items = array();

  $items['admin/election'] = array(
    'title' => 'Elections',
    'description' => 'Administer elections and referendums.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
    'weight' => 1,
  );

  $items['admin/election/list'] = array(
    'title' => 'Election list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_list_form'),
    'access arguments' => array('administer elections'),
    'file' => 'election.admin.inc',
    'description' => 'View, edit, and add new elections.',
    'weight' => -10,
  );

  foreach (election_types() as $type_mn => $type) {
    $items['admin/election/list/add/' . $type_mn] = array(
      'title' => 'Add new ' . $type['name'],
      'title callback' => 'check_plain',
      'page callback' => 'election_page_add',
      'page arguments' => array(4),
      'access arguments' => array('administer elections'),
      'file' => 'election.admin.inc',
      'description' => empty($type['description'])? '' : $type['description'],
      'type' => MENU_LOCAL_ACTION,
      'weight' => isset($type['weight'])? $type['weight'] : 0,
    );
    $items['admin/election/' . $type_mn] = array(
      'title' => drupal_ucfirst($type['name']) . ' settings',
      'title callback' => 'check_plain',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => empty($type['description'])? '' : $type['description'],
      'weight' => isset($type['weight'])? $type['weight'] : 0,
    );
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name = _election_get_posts_name($type_mn);
      $post_name_plural = _election_get_posts_name($type_mn, TRUE);
      $items['admin/election/' . $type_mn . '/' . $post_key] = array(
        'title' => drupal_ucfirst($post_name) . ' settings',
        'title callback' => 'check_plain',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer elections'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'description' => 'Manage fields and display settings for ' . $post_name_plural . '.',
      );
    }
  }

  $items['admin/election/candidate'] = array(
    'title' => 'Candidate settings',
    'description' => 'Manage fields and display settings for election candidates (not applicable to referendums).',
    'title callback' => 'check_plain',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
  );
  $items['admin/election/candidate/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election'] = array(
    'title' => 'Elections',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_list_form'),
    'access callback' => 'election_access',
    'access arguments' => array('view'),
    'file' => 'election.admin.inc',
  );

  $items['election/%election'] = array(
    'title callback' => 'election_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('view', 2),
    'file' => 'election.pages.inc',
  );

  $items['election/%election/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/nomination'] = array(
    'title' => 'Nomination form',
    'page callback' => 'election_page_nomination',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('view', 1),
    'file' => 'election-candidate.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election/%election/posts'] = array(
    'title callback' => 'election_page_postlist_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_list_form', 1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_access',
    'access arguments' => array('update', 2),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_page_edit',
    'file' => 'election.admin.inc',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_form_delete_confirm', 1),
    'access callback' => 'election_access',
    'access arguments' => array('delete', 1),
    'file' => 'election.admin.inc',
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['election/%election/posts/add'] = array(
    'title' => 'Add new',
    'page callback' => 'election_post_page_add',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'file' => 'election-post.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['election/%election/posts/%election_post'] = array(
    'title callback' => 'election_post_page_title',
    'title arguments' => array(1, 3),
    'page callback' => 'election_post_page_view',
    'page arguments' => array(1, 3),
    'file' => 'election.pages.inc',
    'access callback' => 'election_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['election/%election/posts/%election_post/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/posts/%election_post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_post_page_edit',
    'page arguments' => array(1, 3),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election/%election/posts/%election_post/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_form_delete_confirm', 1, 3),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'file' => 'election-post.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_menu_alter(&$items) {
  foreach (election_types() as $type_mn => $type) {
    $path = 'admin/election/' . $type_mn;
    unset($items[$path . '/settings']);
    $items[$path . '/fields']['weight'] = -2;
    $items[$path . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/fields']['description'] = t(
      'Manage fields for the election type %type.',
      array('%type' => $type['name'])
    );
    $items[$path . '/display']['weight'] = -1;
    $items[$path . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display']['description'] = t(
      'Manage display for the election type %type.',
      array('%type' => $type['name'])
    );
    if (!empty($type['post key'])) {
      $post_key = $type['post key'];
      $post_name_plural = _election_get_posts_name($type_mn, TRUE);
      $items[$path . '/' . $post_key]['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/fields']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/fields']['description'] = t(
        'Manage fields for %type @posts_name_plural.',
        array(
          '%type' => $type['name'],
          '@posts_name_plural' => $post_name_plural,
        )
      );
      $items[$path . '/' . $post_key . '/display']['type'] = MENU_NORMAL_ITEM;
      $items[$path . '/' . $post_key . '/display']['description'] = t(
        'Manage display for %type @posts_name_plural.',
        array(
          '%type' => $type['name'],
          '@posts_name_plural' => $post_name_plural,
        )
      );
    }
  }
  unset($items['admin/election/candidate/settings']);
  $items['admin/election/candidate/fields']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/fields']['description'] = t('Manage fields for election candidates.');
  $items['admin/election/candidate/display']['type'] = MENU_NORMAL_ITEM;
  $items['admin/election/candidate/display']['description'] = t('Manage display for election candidates.');
}

/**
 * Implements hook_admin_paths().
 *
 * @todo sort this out
 */
function election_admin_paths() {
  $paths = array(
    //'election/*/add' => TRUE,
    //'election/*/edit' => TRUE,
    //'election/*/delete' => TRUE,
    'election/*' => TRUE,
  );
  return $paths;
}

/**
 * Wrapper function to allow deleting multiple elections.
 *
 * @param array $election_ids
 *   Array of election IDs.
 * @return bool
 */
function election_delete_multiple(array $election_ids) {
  return entity_get_controller('election')->delete($election_ids);
}

/**
 * Wrapper function to allow deleting an individual election.
 *
 * @see election_delete_multiple()
 *
 * @param mixed $election_id
 *   Single election ID.
 * @return bool
 */
function election_delete($election_id) {
  return election_delete_multiple(array($election_id));
}

/**
 * Wrapper function to allow saving an election.
 *
 * @param stdClass $election
 *   Election object.
 * @return bool
 */
function election_save($election) {
  return entity_get_controller('election')->save($election);
}

/**
 * Wrapper function to allow deleting multiple election posts.
 *
 * @param array $post_ids
 *   Array of post IDs.
 * @return bool
 */
function election_post_delete_multiple(array $post_ids) {
  return entity_get_controller('election_post')->delete($post_ids);
}

/**
 * Wrapper function to allow deleting an individual election post.
 *
 * @see election_post_delete_multiple()
 *
 * @param mixed $post_id
 *   Single post ID.
 * @return bool
 */
function election_post_delete($post_id) {
  return election_post_delete_multiple(array($post_id));
}

/**
 * Wrapper function to allow saving an election post.
 *
 * @param stdClass $post
 *   Election post object.
 * @return bool
 */
function election_post_save($post) {
  return entity_get_controller('election_post')->save($post);
}

/**
 * Title callback for election/%election/posts (output should not
 * be escaped here as it is done later).
 *
 * @param stdClass $election
 *
 * @return string
 */
function election_page_postlist_title($election) {
  return drupal_ucfirst(_election_get_posts_name($election->type, TRUE));
}

/**
 * Title callback for election/%election/posts/%election_post (output should not
 * be escaped here as it is done later).
 *
 * @param stdClass $election
 * @param stdClass $post
 *
 * @return string
 */
function election_post_page_title($election, $post) {
  return $post->title;
}

/**
 * Title callback for election/%election/view (output should not be escaped here
 * as it is done later).
 *
 * @param stdClass $election
 *
 * @return string
 */
function election_page_title($election) {
  return $election->title;
}


/**
 * Implements hook_token_info().
 * See http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7.
 */
function election_token_info() {
  $type = array(
    'name' => t('Elections'),
    'description' => t('Tokens related to elections.'),
    'needs-data' => 'election',
  );
  $tokens = array(
    'id' => array(
      'name' => t('Election ID'),
      'description' => t('The unique ID of the election.'),
    ),
    'type' => array(
      'name' => t('Election type'),
      'description' => t('The machine-readable name of the election type.'),
    ),
    'type-name' => array(
      'name' => t('Election type name'),
      'description' => t('The human-readable name of the election type.'),
    ),
    'title' => array(
      'name' => t('Title'),
      'description' => t('The title of the election.'),
    ),
    'created' => array(
      'name' => t('Date created'),
      'description' => t('The date the election was created.'),
      'type' => 'date',
    ),
  );
  return array(
    'types' => array('election' => $type),
    'tokens' => array('election' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function election_tokens($type, array $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  if ($type == 'election' && !empty($data['election'])) {
    $election = $data['election'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'id':
          $replacements[$original] = $election->election_id;
          break;
        case 'type':
          $replacements[$original] = $sanitize ? check_plain($election->type) : $election->type;
          break;
        case 'type-name':
          $type = _election_type_load($election->type);
          $type_name = $type['name'];
          $replacements[$original] = $sanitize ? check_plain($type_name) : $type_name;
          break;
        case 'title':
          $replacements[$original] = $sanitize ? check_plain($election->title) : $election->title;
          break;
        case 'created':
          $replacements[$original] = format_date($election->created, 'medium');
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_pathauto(). See the Pathauto module.
 *
 * @param string $op
 * @return stdClass
 */
function election_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'election';
      $settings['token_type'] = 'election';
      $settings['groupheader'] = t('Election paths');
      $settings['patterndescr'] = t('Default path pattern (applies to all election types with blank patterns below)');
      $settings['patterndefault'] = 'election/[election:title]';
      $settings['batch_update_callback'] = 'election_pathauto_bulk_update_batch_process';
      $settings['batch_file'] = drupal_get_path('module', 'election') . '/election.module';
      foreach (election_types() as $type_mn => $type) {
        $settings['patternitems'][$type_mn] = t('Pattern for all %type paths', array('%type' => $type['name']));
      }
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Allow bulk updating of paths. See the Pathauto module.
 *
 * @see election_pathauto()
 * @param array &$context
 * @return void
 */
function election_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }
  $query = db_select('election', 'e');
  $query->leftJoin('url_alias', 'ua', "CONCAT('election/', e.election_id) = ua.source");
  $query->addField('e', 'election_id');
  $query->isNull('ua.source');
  $query->condition('e.election_id', $context['sandbox']['current'], '>');
  $query->orderBy('e.election_id');
  $query->addTag('pathauto_bulk_update');
  $query->addMetaData('entity', 'election');
  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();
    // If there are no elections to update, then stop immediately.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }
  $query->range(0, 25);
  $ids = $query->execute()->fetchCol();
  pathauto_election_update_alias_multiple($ids, 'bulkupdate');
  $context['sandbox']['count'] += count($ids);
  $context['sandbox']['current'] = max($ids);
  $context['message'] = t('Updated alias for election @id.', array('@id' => end($ids)));
  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

/**
 * Update the URL aliases for an individual election.
 *
 * @param $election
 *   A election object.
 * @param $op
 *   Operation being performed on the election ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_update_alias(stdClass $election, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the election.
  if (isset($election->path['pathauto']) && empty($election->path['pathauto'])) {
    return;
  }
  $options += array(
    'language' => isset($election->language) ? $election->language : LANGUAGE_NONE,
  );
  // Skip processing if the election has no pattern.
  if (!pathauto_pattern_load_by_entity('election', $election->type, $options['language'])) {
    return;
  }
  module_load_include('inc', 'pathauto');
  $uri = entity_uri('election', $election);
  pathauto_create_alias('election', $op, $uri['path'], array('election' => $election), $election->type, $options['language']);
}

/**
 * Update the URL aliases for multiple elections.
 *
 * @param $election_ids
 *   An array of election IDs.
 * @param $op
 *   Operation being performed on the elections ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function pathauto_election_update_alias_multiple(array $election_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $elections = election_load_multiple($election_ids);
  foreach ($elections as $election) {
    pathauto_election_update_alias($election, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($election_ids), 'Updated URL alias for 1 election.', 'Updated URL aliases for @count elections.'));
  }
}

/**
 * Implements hook_path_alias_types(). See Pathauto module.
 *
 * Used primarily by the bulk delete form.
 */
function election_path_alias_types() {
  $objects = array(
    'election/' => t('Elections')
  );
  return $objects;
}



/**
 * Internal function that determines whether voting/nominating in an election is 'open',
 * based on the status, opening time and closing time.
 *
 * @param int $status
 *   The vstatus/nstatus of the election (see election.install).
 * @param int $open_time
 *   The UNIX timestamp for the election's voting opening time.
 * @param int $close_time
 *   The UNIX timestamp for the election's voting closing time.
 *
 * @return bool
 */
function _election_is_open($status, $open_time, $close_time) {
  if ($status == ELECTION_STATUS_OPEN) {
    return TRUE;
  }
  if ($status == ELECTION_STATUS_CLOSED) {
    return FALSE;
  }
  return (
    $open_time && REQUEST_TIME >= $open_time
    && (!$close_time || REQUEST_TIME < $close_time)
  );
}

/**
 * Internal function to format the voting/nominating status (vstatus/nstatus)
 * field of an election for display.
 *
 * @todo make this themeable
 *
 * @param stdClass $election
 * @param string $status_prefix
 *   The type of status ('v' for voting, 'n' for nominations).
 *
 * @return string
 */
function _election_format_status(stdClass $election, $status_prefix = 'v') {
  // Nominations aren't relevant to referendums.
  // @todo make this extensible
  if ($election->type == 'referendum' && $status_prefix == 'n') {
    return t('N/A');
  }
  $status = $election->{$status_prefix . 'status'};
  $open_time = $election->{$status_prefix . 'open_time'};
  $close_time = $election->{$status_prefix . 'close_time'};
  $open_status = t('<span class="election-status-open">Open</span>');
  $closed_status = t('<span class="election-status-closed">Closed</span>');
  if ($status == ELECTION_STATUS_SCHEDULED) {
    $scheduled_future = t('Scheduled for the future');
    $scheduled_past = t('Scheduled for the past');
    $scheduled_now = t('Scheduled (now open)');
    if (REQUEST_TIME < $open_time) {
      return $scheduled_future;
    }
    elseif (REQUEST_TIME < $close_time) {
      return $scheduled_now;
    }
    else {
      return $scheduled_past;
    }
  }
  $is_open = _election_is_open($status, $open_time, $close_time);
  return $is_open? $open_status : $closed_status;
}

/**
 * Internal function to format the status field of an election post for display.
 * Election posts can either inherit the election's status, or they can be
 * closed. This applies to both voting and nominations.
 *
 * @todo make this themeable
 *
 * @param stdClass $election
 * @param stdClass $post
 * @param string $type
 *   The type of status ('v' for voting, 'n' for nominations).
 *
 * @return string
 */
function _election_post_format_status(stdClass $election, stdClass $post, $status_prefix = 'v') {
  $status = $post->{$status_prefix . 'status'};
  if ($status == ELECTION_POST_STATUS_INHERIT) {
    return t('!status (inherited)', array('!status' => _election_format_status($election, $status_prefix)));
  }
  $is_open = FALSE; // only two options for now are inherited or closed.
  $open_status = t('<span class="election-post-status-open">Open</span>');
  $closed_status = t('<span class="election-post-status-closed">Closed</span>');
  $status_formatted = $is_open? $open_status : $closed_status;
  return t('!status_formatted (overridden)', array('!status_formatted' => $status_formatted));
}

/**
 * General function for creating breadcrumbs. Accepts any number of parameters,
 * each corresponding to the breadcrumb link. Output must be sanitized before
 * passing to this function. The string '_POST_' will be replaced by the
 * election's post type name.
 *
 * @param stdClass $election
 * @param string $part
 *
 * @return array
 *   An array of breadcrumb parts that can be provided to drupal_set_breadcrumb().
 */
function _election_build_breadcrumb(stdClass $election = NULL) {
  $args = func_get_args();
  $links = array();
  $links[] = l(
    t('Home'),
    '<front>'
  );
  $links[] = l(
    'Elections',
    'election'
  );
  if (!is_object($election)) {
    return $links;
  }
  $election_uri_path = election_uri_path($election);
  unset($args[0]);
  $args_count = count($args);
  if ($args_count > 0) {
    $links[] = l(
      $election->title, // l() runs check_plain anyway.
      election_uri_path($election)
    );
  }
  else {
    $links[] = check_plain($election->title);
  }
  foreach ($args as $key => $arg) {
    $link = $arg;
    switch ($arg) {
      case '_POSTS_':
        $posts_name = _election_get_posts_name($election->type, TRUE);
        if ($key == $args_count) {
          // Don't link the last item.
          $link = check_plain(drupal_ucfirst($posts_name));
          break;
        }
        else {
          $link = l(drupal_ucfirst($posts_name), $election_uri_path . '/posts');
        }
        break;
    }
    $links[] = $link;
  }
  return $links;
}

/**
 * Internal function: load election type information by its machine name.
 *
 * @param string $type_mn
 *   The machine name of the type.
 * @return mixed
 *   A stdClass election type object, or FALSE on failure.
 */
function _election_type_load($type_mn) {
  $type = array(
    'name' => t('Unknown type'),
    'post key' => 'post',
    'post name' => t('post'),
    'post name plural' => t('posts'),
  );
  $types = election_types();
  if (isset($types[$type_mn])) {
    $type = $types[$type_mn];
  }
  return $type;
}

/**
 * Get the post name (i.e. 'motion' or 'position') for an election type.
 *
 * @param string $type_mn
 * @param bool $plural
 *
 * @return string
 */
function _election_get_posts_name($type_mn, $plural = FALSE) {
  $name = 'post';
  $type = _election_type_load($type_mn);
  if (!$type) {
    return $name;
  }
  if (!empty($type['post name'])) {
    $name = $type['post name'];
  }
  if ($plural && !empty($type['post name plural'])) {
    $name = $type['post name plural'];
  }
  return $name;
}
