<?php
/**
 * @file
 * Election Condition: primary module file.
 */

/**
 * Get conditions.
 *
 * @see hook_election_condition_info()
 * @see hook_election_condition_info_alter()
 *
 * @return array
 *   Array of conditions keyed by machine name.
 */
function election_condition_get_conditions() {
  $conditions = &drupal_static(__FUNCTION__, NULL);
  if ($conditions === NULL) {
    $conditions = array();
    $conditions += module_invoke_all('election_condition_info');
    drupal_alter('election_condition_info', $conditions);
  }
  return $conditions;
}

/**
 * Get the conditions assigned to a given post.
 *
 * @param stdClass $post
 *   An election post object.
 *
 * @return array
 *   Array of conditions keyed by machine name.
 */
function election_condition_get_conditions_by_post($post) {
  $conditions = &drupal_static(__FUNCTION__, array());
  $post_id = $post->post_id;
  if (!isset($conditions[$post_id])) {
    $conditions[$post_id] = array();
    $machine_names = db_select('election_post_condition', 'epc')
      ->fields('epc', array('condition_machine_name'))
      ->condition('post_id', $post_id)
      ->execute()
      ->fetchCol();
    if (count($machine_names)) {
      $condition_info = election_condition_get_conditions();
      foreach ($machine_names as $machine_name) {
        if (isset($condition_info[$machine_name])) {
          $condition = $condition_info[$machine_name];
        }
        else {
          $condition = array(
            'condition_machine_name' => $machine_name,
            'name' => $machine_name,
            'callbacks' => array(),
            'description' => t('Unknown condition'),
          );
        }
        $conditions[$post_id][$machine_name] = $condition;
      }
    }
  }
  return $conditions[$post_id];
}

/**
 * Implements hook_hook_info().
 */
function election_condition_hook_info() {
  return array(
    'election_condition_info' => array(
      'group' => 'election',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function election_condition_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $form_state['election'];

  $post_conditions = election_condition_get_conditions_by_post($post);

  $form['conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conditional voting'),
    '#collapsible' => TRUE,
    '#collapsed' => (empty($post_conditions)),
    '#weight' => 99,
  );
  $form['conditions']['title'] = array(
    'title' => array(
      '#prefix' => '<div class="form-item"><label for="edit-conditions">',
      '#markup' => t('Assign conditions'),
      '#suffix' => '</label>',
    ),
  );
  $condition_headers = array(
    'name' => t('Name'),
    'callbacks' => t('Callbacks'),
    'description' => t('Description'),
  );

  $condition_options = array();
  foreach (election_condition_get_conditions() as $machine_name => $condition) {
    if (empty($condition['callbacks'])) {
      $callbacks = '<span class="error">'
                  . t('No valid callbacks found for the condition %machine_name.',
                      array('%machine_name' => $machine_name))
                  . '</span>';
    }
    else {
      $items = $condition['callbacks'];
      foreach ($items as $key => $item) {
        $items[$key] = t('@key: %item', array(
          '@key' => is_string($key) ? drupal_ucfirst($key) : 'Function',
          '%item' => $item . '()',
        ));
      }
      $callbacks = theme('item_list', array('items' => $items));
    }
    $condition_options[$machine_name] = array(
      'name' => $condition['name'],
      'callbacks' => $callbacks,
      'description' => $condition['description'],
    );
  }

  foreach ($post_conditions as $machine_name => $condition) {
    if (!isset($condition_options[$machine_name])) {
      $condition_options[$machine_name] = array(
        'name' => $machine_name,
        'callbacks' => '',
        'description' => t('Unknown condition'),
      );
    }
  }

  $form['conditions']['conditions'] = array(
    '#type' => 'tableselect',
    '#attributes' => array('class' => array('select-conditions')),
    '#default_value' => array_fill_keys(array_keys($post_conditions), 1),
    '#header' => $condition_headers,
    '#options' => $condition_options,
    '#multiple' => TRUE,
    '#js_select' => FALSE,
    '#empty' => t('No conditions available.'),
  );

  $form['buttons']['submit']['#submit'][] = 'election_condition_election_post_form_submit';

}

/**
 * Additional callback for the Submit button on the form election_post_form.
 *
 * Save the conditions for the post.
 *
 * @see election_post_form()
 */
function election_condition_election_post_form_submit($form, &$form_state) {

  $post = $form_state['post'];

  $transaction = db_transaction();
  try {
    $conditions = array();
    foreach ($form_state['values']['conditions'] as $machine_name => $value) {
      if (!empty($value)) {
        $conditions[] = $machine_name;
      }
    }
    db_delete('election_post_condition')
      ->condition('post_id', $post->post_id)
      ->execute();
    if (count($conditions)) {
      $insert = db_insert('election_post_condition')->fields(array('post_id', 'condition_machine_name'));
      foreach ($conditions as $machine_name) {
        $insert->values(array($post->post_id, $machine_name));
      }
      $insert->execute();
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('election_condition', $e, NULL, WATCHDOG_ERROR);
  }

}

/**
 * Implements hook_entity_delete().
 */
function election_condition_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated election_post_condition entries when a post is deleted.
    case 'election_post':
      db_delete('election_post_condition')
        ->condition('post_id', $entity->post_id)
        ->execute();
      break;

  }
}
